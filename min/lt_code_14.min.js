document.head.innerHTML += "<style id=\"lt_code_css\"></style>"; var lt_code = function (...arg) { return lt_code.getAllType(arg, true) }; class lt_dom { constructor(dom) { this.dom = dom } on(evt, cls, fuc) { this.dom.addEventListener(evt, function (event) { if (event.target.classList.contains(cls)) { fuc.call(event.targe, event) } }) } }; lt_code.variable = {}; lt_code.variable.online = false; lt_code.variable.random = (max, min, noF) => { var ret = 0; if (max) { if (min) { if (max < min) { ret = min } else { ret = min + Math.random() * (max - min) } } else { ret = Math.random() * max } } else { if (min) { ret = min + Math.random() } else { ret = Math.random() } } if (noF) { ret = lt_code.getNum(ret) } return ret }; lt_code.variable.width = window.innerWidth; lt_code.variable.height = window.innerHeight; lt_code.variable.WHchange = function () { var oldW = lt_code.variable.width; var oldH = lt_code.variable.height; setInterval(function () { lt_code.variable.width = window.innerWidth; lt_code.variable.height = window.innerHeight; if (lt_code.variable.width != oldW || lt_code.variable.height != oldH) { oldW = lt_code.variable.width; oldH = lt_code.variable.height; lt_code.variable.WHchange = true } else { lt_code.variable.WHchange = false } }, 200); return false }(); lt_code.variable.roundColor = (max, min) => { var chat = 255; var r, g, b, return_value; if (!min && !max) { r = lt_code.variable.random() * 255 + 1; r = lt_code.getNum(r); g = lt_code.variable.random() * 255 + 1; g = lt_code.getNum(g); b = lt_code.variable.random() * 255 + 1; b = lt_code.getNum(b); return_value = "rgb(" + r + "," + g + "," + b + ")" } else if (min && !max) { chat -= min; r = lt_code.variable.random() * chat + min; r = lt_code.getNum(r); g = lt_code.variable.random() * chat + min; g = lt_code.getNum(g); b = lt_code.variable.random() * chat + min; b = lt_code.getNum(b); return_value = "rgb(" + r + "," + g + "," + b + ")" } else if (!min && max) { chat = max; min = 1; r = lt_code.variable.random() * chat + min; r = lt_code.getNum(r); g = lt_code.variable.random() * chat + min; g = lt_code.getNum(g); b = lt_code.variable.random() * chat + min; b = lt_code.getNum(b); return_value = "rgb(" + r + "," + g + "," + b + ")" } else { chat = max - min; r = lt_code.variable.random() * chat + min; r = lt_code.getNum(r); g = lt_code.variable.random() * chat + min; g = lt_code.getNum(g); b = lt_code.variable.random() * chat + min; b = lt_code.getNum(b); return_value = "rgb(" + r + "," + g + "," + b + ")" } return lt_code.color_change(return_value) }; lt_code.variable.roundRgba = (max, min, alpha) => { var chat = 255; var r, g, b, a, return_value; if (!min && !max && !alpha) { r = lt_code.variable.random() * 255 + 1; r = lt_code.getNum(r); g = lt_code.variable.random() * 255 + 1; g = lt_code.getNum(g); b = lt_code.variable.random() * 255 + 1; b = lt_code.getNum(b); a = Math.floor(lt_code.variable.random() * 10 + 1); a /= 10; return_value = "rgba(" + r + "," + g + "," + b + "," + a + ")" } else if (min && !max && !alpha) { chat -= min; r = lt_code.variable.random() * chat + min; r = lt_code.getNum(r); g = lt_code.variable.random() * chat + min; g = lt_code.getNum(g); b = lt_code.variable.random() * chat + min; b = lt_code.getNum(b); a = Math.floor(lt_code.variable.random() * 10 + 1); a /= 10; return_value = "rgba(" + r + "," + g + "," + b + "," + a + ")" } else if (!min && max && !alpha) { chat = max; min = 1; r = lt_code.variable.random() * chat + min; r = lt_code.getNum(r); g = lt_code.variable.random() * chat + min; g = lt_code.getNum(g); b = lt_code.variable.random() * chat + min; b = lt_code.getNum(b); a = Math.floor(lt_code.variable.random() * 10 + 1); a /= 10; return_value = "rgba(" + r + "," + g + "," + b + "," + a + ")" } else if (min && max && !alpha) { chat = max - min; r = lt_code.variable.random() * chat + min; r = lt_code.getNum(r); g = lt_code.variable.random() * chat + min; g = lt_code.getNum(g); b = lt_code.variable.random() * chat + min; b = lt_code.getNum(b); a = Math.floor(lt_code.variable.random() * 10 + 1); a /= 10; return_value = "rgba(" + r + "," + g + "," + b + "," + a + ")" } else if (!min && !max && alpha) { r = lt_code.variable.random() * 255 + 1; r = lt_code.getNum(r); g = lt_code.variable.random() * 255 + 1; g = lt_code.getNum(g); b = lt_code.variable.random() * 255 + 1; b = lt_code.getNum(b); a = alpha; return_value = "rgba(" + r + "," + g + "," + b + "," + a + ")" } else if (min && !max && alpha) { chat -= min; r = lt_code.variable.random() * chat + min; r = lt_code.getNum(r); g = lt_code.variable.random() * chat + min; g = lt_code.getNum(g); b = lt_code.variable.random() * chat + min; b = lt_code.getNum(b); a = alpha; return_value = "rgba(" + r + "," + g + "," + b + "," + a + ")" } else if (!min && max && alpha) { chat = max; min = 1; r = lt_code.variable.random() * chat + min; r = lt_code.getNum(r); g = lt_code.variable.random() * chat + min; g = lt_code.getNum(g); b = lt_code.variable.random() * chat + min; b = lt_code.getNum(b); a = alpha; return_value = "rgba(" + r + "," + g + "," + b + "," + a + ")" } else { chat = max - min; r = lt_code.variable.random() * chat + min; r = lt_code.getNum(r); g = lt_code.variable.random() * chat + min; g = lt_code.getNum(g); b = lt_code.variable.random() * chat + min; b = lt_code.getNum(b); a = alpha; return_value = "rgba(" + r + "," + g + "," + b + "," + a + ")" } return return_value }; lt_code.chineseToUtf8 = function (s1) { function Dec2Dig(n1) { var s = ""; var n2 = 0; for (var i = 0; i < 4; i++) { n2 = Math.pow(2, 3 - i); if (n1 >= n2) { s += '1'; n1 = n1 - n2 } else s += '0' } return s } function Str2Hex(s) { var c = ""; var n; var ss = "0123456789ABCDEF"; var digS = ""; for (var i = 0; i < s.length; i++) { c = s.charAt(i); n = ss.indexOf(c); digS += Dec2Dig(eval(n)) } return digS } function Hex2Utf8(s) { function Dig2Dec(s) { var retV = 0; if (s.length == 4) { for (var i = 0; i < 4; i++) { retV += eval(s.charAt(i)) * Math.pow(2, 3 - i) } return retV } return -1 } var retS = ""; var tempS = ""; var ss = ""; if (s.length == 16) { tempS = "1110" + s.substring(0, 4); tempS += "10" + s.substring(4, 10); tempS += "10" + s.substring(10, 16); var sss = "0123456789ABCDEF"; for (var i = 0; i < 3; i++) { retS += "%"; ss = tempS.substring(i * 8, (eval(i) + 1) * 8); retS += sss.charAt(Dig2Dec(ss.substring(0, 4))); retS += sss.charAt(Dig2Dec(ss.substring(4, 8))) } return retS } return "" } var s = escape(s1); var sa = s.split("%"); var retV = ""; if (sa[0] != "") { retV = sa[0] } for (var i = 1; i < sa.length; i++) { if (sa[i].substring(0, 1) == "u") { retV += Hex2Utf8(Str2Hex(sa[i].substring(1, 5))) } else retV += "%" + sa[i] } return retV }; lt_code.utf8ToChinese = function (szInput) { var x, wch, wch1, wch2, uch = "", szRet = ""; for (x = 0; x < szInput.length; x++) { if (szInput.charAt(x) == "%") { wch = parseInt(szInput.charAt(++x) + szInput.charAt(++x), 16); if (!wch) { break } if (!(wch & 0x80)) { wch = wch } else if (!(wch & 0x20)) { x++; wch1 = parseInt(szInput.charAt(++x) + szInput.charAt(++x), 16); wch = (wch & 0x1F) << 6; wch1 = wch1 & 0x3F; wch = wch + wch1 } else { x++; wch1 = parseInt(szInput.charAt(++x) + szInput.charAt(++x), 16); x++; wch2 = parseInt(szInput.charAt(++x) + szInput.charAt(++x), 16); wch = (wch & 0x0F) << 12; wch1 = (wch1 & 0x3F) << 6; wch2 = (wch2 & 0x3F); wch = wch + wch1 + wch2 } szRet += String.fromCharCode(wch) } else { szRet += szInput.charAt(x) } } return (szRet) }; lt_code.getUrlData = function () { var href = window.location.href; var urlData = []; if (/\?/.test(href)) { href = /\?(.+)/.exec(href)[1]; var leftAndRight = [...href.matchAll(/([^=]+)=([^=]+)&?/g)]; for (var i = 0; i < leftAndRight.length; i++) { var str = '{"' + leftAndRight[i][1] + '":"' + leftAndRight[i][2] + '"}'; urlData.push(JSON.parse(str)) } } return urlData }; lt_code.variable.users_moveTo = 0; lt_code.variable.users = 1; lt_code.variable.scrollTop = 0; lt_code.top_run = setInterval(function () { lt_code.variable.scrollTop = document.body.scrollTop || document.documentElement.scrollTop || 0 }, 20); lt_code.variable.digit = [[[0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0]], [[0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1]], [[0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0]], [[0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0]], [[0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0]], [[1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0]], [[0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0]], [[0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]; lt_code.variable.runer = new Array(); lt_code.variable.addRun = function (num, name) { name = name ? name : "匿名事件"; var newOne = { name: name, num: num }; lt_code.variable.runer[lt_code.variable.runer.length] = newOne }; lt_code.clearAll = function (types) { switch (arguments.length) { case 1: if (types === 1) { lt_code.variable.users_moveTo = 0; lt_code.variable.users = 1; for (var i in lt_code.variable.runer) { clearInterval(lt_code.variable.runer[i].num) } lt_code.variable.runer = new Array(); lt_code.lt_css.innerHTML = "" } break; default: lt_code.variable.users_moveTo = 0; lt_code.variable.users = 1; lt_code.variable.runer = new Array(); lt_code.lt_css.innerHTML = "" } }; lt_code.variable.regular = {}; lt_code.variable.regular.getChinese = /^[\u4e00-\u9fa5]{1}/; lt_code.variable.regular.getChineseMore = /^[\u4e00-\u9fa5]+/; lt_code.variable.regular.getEmall = /^[a-zA-Z0-9_\-]+\@[a-zA-Z0-9]+\.[a-z0-9]{2,6}/; lt_code.variable.regular.getYMD = /(\d{4}|\d{2})[\,|\-|\_|\/](1[0-2]|[0-9])[\,|\-|\_|\/]([0-2][0-9]|[0-3][0-1]|[0-9])/; lt_code.variable.regular.getMounth = /1[0-2]|[0-9]/; lt_code.variable.regular.getDaty = /[0-2][0-9]|[0-3][0-1]|[0-9]/; lt_code.getChinese = function (text, types) { var value_return = ""; switch (arguments.length) { case 1: value_return = lt_code.variable.regular.getChinese.exec(text)[0]; return !value_return ? "没有找到汉字" : value_return; case 2: if (types === 0) { value_return = /^[\u4e00-\u9fa5]*/.exec(text)[0]; return !value_return ? "没有找到汉字" : value_return } else if (types === 1) { value_return = /^[\u4e00-\u9fa5]/.exec(text)[0]; return !value_return ? "没有找到汉字" : value_return } else if (types === "+") { value_return = /^[\u4e00-\u9fa5]+/.exec(text)[0]; return !value_return ? "没有找到汉字" : value_return } else if (types === "*") { value_return = /^[\u4e00-\u9fa5]*/.exec(text)[0]; return !value_return ? "没有找到汉字" : value_return } else { console.log("getChinese函数暂时不支持该写法"); return "" } default: console.log("getChinese函数参数输入错误!"); return "" } }; lt_code.getDomFather = function (dom) { return dom.parentNode }; lt_code.lt_css = document.getElementById("lt_code_css") ? document.getElementById("lt_code_css") : null; lt_code.getId = function (idName) { var falseRet = () => { console.log("getId函数没有输入值!") }; return !document.getElementById(idName) ? falseRet() : document.getElementById(idName) }; lt_code.getClass = function (className, few, dom_father, useFew) { switch (arguments.length) { case 1: return document.getElementsByClassName(className); case 2: return document.getElementsByClassName(className)[few]; case 3: return dom_father.getElementsByClassName(className)[few]; case 4: if (useFew) { return dom_father.getElementsByClassName(className)[few] } else { return dom_father.getElementsByClassName(className) } default: if (arguments.length !== 0) { console.log("getClass函数输入错误!") } else { console.log("getClass函数没有输入值!") } } }; lt_code.getTage = function (tageName, dom, few, ISuseDom) { switch (arguments.length) { case 1: return document.getElementsByTagName(tageName); case 2: return dom.getElementsByTagName(tageName); case 3: return dom.getElementsByTagName(tageName)[few]; case 4: if (ISuseDom) { return dom.getElementsByTagName(tageName)[few] } else { return document.getElementsByTagName(tageName)[few] } default: if (arguments.length !== 0) { console.log("getTage函数输入错误!") } else { console.log("getTage函数没有输入值!") } } }; lt_code.getAll = function (name, few, dom_father, useFew) { var value_read; var exec_value = new Array(); var return_value; if (arguments.length === 0) { return_value = document.body } else if (arguments.length === 1) { exec_value = /\#?\.?/.exec(name); if (!exec_value || !exec_value[0]) { return_value = lt_code.getTage(name) } else { if (exec_value[0] === "#.") { return_value = null } else { value_read = name.replace(/\#?\.?/, ""); if (exec_value[0] === "#") { return_value = lt_code.getId(value_read) } else if (exec_value[0] === ".") { return_value = lt_code.getClass(value_read) } } } } else if (arguments.length === 2) { exec_value = /\#?\.?/.exec(name); if (!exec_value || !exec_value[0]) { return_value = lt_code.getTage(name, null, few, false) } else { if (exec_value[0] === "#.") { return_value = null } else { value_read = name.replace(/\#?\.?/, ""); if (exec_value[0] === "#") { return_value = lt_code.getId(value_read); console.log("getAll函数读取id不需要输入few参数") } else if (exec_value[0] === ".") { return_value = lt_code.getClass(value_read, few) } } } } else if (arguments.length === 3) { exec_value = /\#?\.?/.exec(name); if (!exec_value || !exec_value[0]) { return_value = lt_code.getTage(name, dom_father, few) } else { if (exec_value[0] === "#.") { return_value = null } else { value_read = name.replace(/\#?\.?/, ""); if (exec_value[0] === "#") { return_value = lt_code.getId(value_read); console.log("getAll函数读取id不需要输入few参数") } else if (exec_value[0] === ".") { return_value = lt_code.getClass(value_read, few, dom_father) } } } } else if (arguments.length === 4) { exec_value = /\#?\.?/.exec(name); if (!exec_value || !exec_value[0]) { if (useFew) { return_value = lt_code.getTage(name, dom_father, few) } else { return_value = lt_code.getTage(name, dom_father) } } else { if (exec_value[0] === "#.") { return_value = null } else { value_read = name.replace(/\#?\.?/, ""); if (exec_value[0] === "#") { return_value = lt_code.getId(value_read); console.log("getAll函数读取id不需要输入few参数") } else if (exec_value[0] === ".") { return_value = lt_code.getClass(value_read, few, dom_father) } } } } else { return_value = document.head } if (return_value === null) { console.log("getAll函数name参数输入错误!") } else if (return_value === undefined) { console.log("本页面中没有找到此对象") } else if (return_value.length === 0) { console.log("没有此对象|此页面中没有使用此对象") } else if (return_value.length === 1) { return_value = return_value[0] } return return_value }; lt_code.getAll2 = function (name, dom_father, few, useFather) { var value_read; var exec_value = new Array(); var return_value; if (arguments.length === 0) { return_value = document.body } else if (arguments.length === 1) { exec_value = /\#?\.?/.exec(name); if (!exec_value || !exec_value[0]) { return_value = lt_code.getTage(name) } else { if (exec_value[0] === "#.") { return_value = null } else { value_read = name.replace(/\#?\.?/, ""); if (exec_value[0] === "#") { return_value = lt_code.getId(value_read) } else if (exec_value[0] === ".") { return_value = lt_code.getClass(value_read) } } } } else if (arguments.length === 2) { exec_value = /\#?\.?/.exec(name); if (!exec_value || !exec_value[0]) { return_value = lt_code.getTage(name, dom_father) } else { if (exec_value[0] === "#.") { return_value = null } else { value_read = name.replace(/\#?\.?/, ""); if (exec_value[0] === "#") { return_value = lt_code.getId(value_read); console.log("js不支持读取父类对象的子类id") } else if (exec_value[0] === ".") { return_value = lt_code.getClass(value_read, null, dom_father, false) } } } } else if (arguments.length === 3) { exec_value = /\#?\.?/.exec(name); if (!exec_value || !exec_value[0]) { return_value = lt_code.getTage(name, dom_father, few) } else { if (exec_value[0] === "#.") { return_value = null } else { value_read = name.replace(/\#?\.?/, ""); if (exec_value[0] === "#") { return_value = lt_code.getId(value_read); console.log("getAll2函数读取id不需要输入few参数") } else if (exec_value[0] === ".") { return_value = lt_code.getClass(value_read, few, dom_father) } } } } else if (arguments.length === 4) { exec_value = /\#?\.?/.exec(name); if (!exec_value || !exec_value[0]) { return_value = lt_code.getTage(name, dom_father, few, useFather) } else { if (exec_value[0] === "#.") { return_value = null } else { value_read = name.replace(/\#?\.?/, ""); if (exec_value[0] === "#") { return_value = lt_code.getId(value_read); console.log("getAll2函数读取id不需要输入few参数") } else if (exec_value[0] === ".") { if (!useFather) { return_value = lt_code.getClass(value_read, few) } else { return_value = lt_code.getClass(value_read, few, dom_father) } } } } } else { return_value = document.head } if (return_value === null) { console.log("getAll2函数name参数输入错误!") } else if (return_value === undefined) { console.log("本页面中没有找到此对象") } else if (return_value.length === 0) { console.log("没有此对象|此页面中没有使用此对象") } else if (return_value.length === 1) { return_value = return_value[0] } return return_value }; lt_code.getAll3 = function (name, few, dom_father, useFew) { var value_read; var exec_value = new Array(); var return_value; var read_child = /\:\:|[\>\<\:]/; if (arguments.length === 0) { return_value = document.body } else { if (!read_child.exec(name)) { if (arguments.length === 1) { exec_value = /\#?\.?/.exec(name); if (!exec_value || !exec_value[0]) { return_value = lt_code.getTage(name) } else { if (exec_value[0] === "#.") { return_value = null } else { value_read = name.replace(/\#?\.?/, ""); if (exec_value[0] === "#") { return_value = lt_code.getId(value_read) } else if (exec_value[0] === ".") { return_value = lt_code.getClass(value_read) } } } } else if (arguments.length === 2) { exec_value = /\#?\.?/.exec(name); if (!exec_value || !exec_value[0]) { return_value = lt_code.getTage(name, null, few, false) } else { if (exec_value[0] === "#.") { return_value = null } else { value_read = name.replace(/\#?\.?/, ""); if (exec_value[0] === "#") { return_value = lt_code.getId(value_read); console.log("getAll函数读取id不需要输入few参数") } else if (exec_value[0] === ".") { return_value = lt_code.getClass(value_read, few) } } } } else if (arguments.length === 3) { exec_value = /\#?\.?/.exec(name); if (!exec_value || !exec_value[0]) { return_value = lt_code.getTage(name, dom_father, few) } else { if (exec_value[0] === "#.") { return_value = null } else { value_read = name.replace(/\#?\.?/, ""); if (exec_value[0] === "#") { return_value = lt_code.getId(value_read); console.log("getAll函数读取id不需要输入few参数") } else if (exec_value[0] === ".") { return_value = lt_code.getClass(value_read, few, dom_father) } } } } else if (arguments.length === 4) { exec_value = /\#?\.?/.exec(name); if (!exec_value || !exec_value[0]) { if (useFew) { return_value = lt_code.getTage(name, dom_father, few) } else { return_value = lt_code.getTage(name, dom_father) } } else { if (exec_value[0] === "#.") { return_value = null } else { value_read = name.replace(/\#?\.?/, ""); if (exec_value[0] === "#") { return_value = lt_code.getId(value_read); console.log("getAll函数读取id不需要输入few参数") } else if (exec_value[0] === ".") { return_value = lt_code.getClass(value_read, few, dom_father) } } } } else { return_value = document.head } } else { var read_select = new Array(); read_select[0] = /([\.\#]?)([\w]+)?(\:\:|[\<\>\:])([\w]+)?([\<\>\:]+[\s\S]+)?/; read_select[1] = /([\.\#]?)([\w]+)?(\:\:|[\<\>\:])(.+)/; exec_value = read_select[1].exec(name); if (arguments.length === 1) { if (exec_value[3] === "<") { if (!exec_value[4]) { return_value = lt_code.getDomFather(lt_code.getAll3(exec_value[1] + exec_value[2], 0)) } else { return_value = lt_code.getAll3(exec_value[4], 0, lt_code.getDomFather(lt_code.getAll3(exec_value[1] + exec_value[2], 0))) } } if (exec_value[3] === ">") { return_value = lt_code.getAll3(exec_value[4], null, lt_code.getAll3(exec_value[1] + exec_value[2], 0), false) } if (exec_value[3] === ":" || exec_value[3] === "::") { return_value = document.defaultView.getComputedStyle(lt_code.getAll3(exec_value[1] + exec_value[2], 0), exec_value[3] + exec_value[4]) } } if (arguments.length === 2) { if (exec_value[3] === "<") { if (!exec_value[4]) { return_value = lt_code.getDomFather(lt_code.getAll3(exec_value[1] + exec_value[2], few)) } else { return_value = lt_code.getAll3(exec_value[4], few, lt_code.getDomFather(lt_code.getAll3(exec_value[1] + exec_value[2], few)), false) } } if (exec_value[3] === ">") { return_value = lt_code.getAll3(exec_value[4], few, lt_code.getAll3(exec_value[1] + exec_value[2], 0)) } if (exec_value[3] === ":" || exec_value[3] === "::") { return_value = document.defaultView.getComputedStyle(lt_code.getAll3(exec_value[1] + exec_value[2], few), exec_value[3] + exec_value[4]) } } if (arguments.length === 3) { if (dom_father.item) { dom_father = dom_father[0] } if (exec_value[3] === ">") { return_value = lt_code.getAll3(exec_value[4], few, dom_father) } if (exec_value[3] === "<") { if (!exec_value[4]) { return_value = lt_code.getDomFather(dom_father) } else { return_value = lt_code.getAll3(exec_value[4], few, lt_code.getDomFather(dom_father)) } } if (exec_value[3] === ":" || exec_value[3] === "::") { return_value = document.defaultView.getComputedStyle(lt_code.getAll3(exec_value[4], few, dom_father)) } } if (arguments.length === 4) { if (dom_father.item) { dom_father = dom_father[0] } if (exec_value[3] === ">") { return_value = lt_code.getAll3(exec_value[4], few, lt_code.getAll3(exec_value[0] + exec_value[1], 0, dom_father), useFew) } if (exec_value[3] === "<") { if (!exec_value[4]) { return_value = lt_code.getDomFather(dom_father) } else { return_value = lt_code.getAll3(exec_value[4], few, lt_code.getDomFather(dom_father), useFew) } } if (exec_value[3] === ":" || exec_value[3] === "::") { return_value = document.defaultView.getComputedStyle(lt_code.getAll3(exec_value[4], few, dom_father)) } } if (arguments.length > 4) { console.log("getAll3选择子类函数暂时不支持其他参数") } } } if (return_value === null) { console.log("getAll函数name参数输入错误!") } else if (return_value === undefined) { console.log("本页面中没有找到此对象") } else if (return_value.length === 0) { console.log("没有此对象|此页面中没有使用此对象") } else if (return_value.length === 1) { return_value = return_value[0] } return return_value }; lt_code.getAllType = function (arg, useLtDom) { var ret; switch (arg.length) { case 1: ret = lt_code.getAll(arg[0]); break; case 2: ret = lt_code.getAll(arg[0], arg[1]); break; case 3: ret = lt_code.getAll(arg[0], arg[1], arg[2]); break; case 4: ret = lt_code.getAll(arg[0], arg[1], arg[2], arg[3]); break; case 5: switch (arg[4]) { case 1: ret = lt_code.getAll(arg[0], arg[1], arg[2], arg[3]); break; case 2: ret = lt_code.getAll2(arg[0], arg[1], arg[2], arg[3]); break; case 3: ret = lt_code.getAll3(arg[0], arg[1], arg[2], arg[3]); break; default: console.error("最后参数出错!") }; default: console.error("参数数量出错!") }if (useLtDom) { if (ret.length) { ret = function () { var values = []; ret = Array.prototype.slice.call(ret); ret.forEach(function (e, i) { values[i] = new lt_code.lt_dom(e) }); return values }() } else { ret = new lt_code.lt_dom(ret) } } return ret }; lt_code.getAllToArray = function (...arg) { var ret; switch (arg.length) { case 1: ret = lt_code.getAll(arg[0]); break; case 2: ret = lt_code.getAll(arg[0], arg[1]); break; case 3: ret = lt_code.getAll(arg[0], arg[1], arg[2]); break; case 4: ret = lt_code.getAll(arg[0], arg[1], arg[2], arg[3]); break; case 5: switch (arg[4]) { case 1: ret = lt_code.getAll(arg[0], arg[1], arg[2], arg[3]); break; case 2: ret = lt_code.getAll2(arg[0], arg[1], arg[2], arg[3]); break; case 3: ret = lt_code.getAll3(arg[0], arg[1], arg[2], arg[3]); break; default: console.error("最后参数出错!") }; default: console.error("参数数量出错!") }if (ret.length) { ret = Array.prototype.slice.call(ret) } return ret }; lt_code.getIframeWindow = function (idName) { return lt_code.getId(idName).contentWindow }; lt_code.getIframe = function (dom, name) { var inner_value = dom.contentDocument.getElementsByTagName("body")[0]; if (!inner_value) { console.log("读取对象非iframe内联边框|没能读取到对象"); return } return lt_code.getAll2(name, inner_value) }; lt_code.color_change = function (color) { var return_value; var color_exec; var regular = /\#|[rgba]+/; var return_values = new Array(); color_exec = regular.exec(color); if (!color_exec) { console.log("color_change函数输入的颜色值不正确!") } else if (color_exec[0] === "#") { return_value = color.replace(/\#/, ""); if (return_value.length === 3) { return_value = "rgb(" + (lt_code.form16To10(return_value[0]) * 16 + lt_code.form16To10(return_value[0])) + "," + (lt_code.form16To10(return_value[1]) * 16 + lt_code.form16To10(return_value[1])) + "," + (lt_code.form16To10(return_value[2]) * 16 + lt_code.form16To10(return_value[2])) + ")" } else if (return_value.length === 6) { return_value = "rgb(" + (lt_code.form16To10(return_value[0]) * 16 + lt_code.form16To10(return_value[1])) + "," + (lt_code.form16To10(return_value[2]) * 16 + lt_code.form16To10(return_value[3])) + "," + (lt_code.form16To10(return_value[4]) * 16 + lt_code.form16To10(return_value[5])) + ")" } else { console.log("color_change函数#类颜色值输入位数不正确!"); return_value = null } } else if (color_exec[0] === "rgb") { return_value = /(\d+)\,(\d+)\,(\d+)/.exec(color); if (return_value.length === 4) { return_values = new Array(); return_values[0] = "#"; for (var i = 1; i < return_value.length; i++) { if (return_value[i] > 0 && return_value[i] < 256) { return_values[i] = lt_code.getNum(return_value[i], 4); return_values[i] = lt_code.form10To16(return_values[i]) } else { console.log("color_change函数rgb输入的第" + i + "个数值有误!"); return_values[i] = "00" } } for (var i = 1; i < return_values.length; i++) { return_values[i] = return_values[i].length === 1 ? "0" + return_values[i] : return_values[i] } return_value = return_values[0] + return_values[1] + return_values[2] + return_values[3] } else { console.log("color_change函数,rgb()类颜色值输入错误"); return_value = null } } else if (color_exec[0] === "rgba") { return_value = /(\d+)\,(\d+)\,(\d+)\,(\d\.\d+|\d)/.exec(color); if (lt_code.getNum(return_value[4]) > 1) { console.log("color_change函数rgba()类颜色输入alpha参数有误"); return_value = null } else { var alpha = lt_code.getNum(return_value[4] * 100) / 100; if (return_value.length === 5) { return_values = new Array(); return_values[0] = "#"; for (var i = 1; i < return_value.length - 1; i++) { if (return_value[i] > 0 && return_value[i] < 256) { return_values[i] = lt_code.getNum(return_value[i], 4) * alpha; return_values[i] = lt_code.getNum(return_values[i]); return_values[i] = lt_code.form10To16(return_values[i]) } else { console.log("color_change函数rgb输入的第" + i + "个数值有误!"); return_values[i] = "00" } } for (var i = 1; i < return_values.length; i++) { return_values[i] = return_values[i].length === 1 ? "0" + return_values[i] : return_values[i] } return_value = return_values[0] + return_values[1] + return_values[2] + return_values[3] } else { console.log("color_change函数,rgba()类颜色值输入值错误"); return_value = null } } } return return_value }; lt_code.form10To16 = function (num) { if (typeof (num) === "string") { num = lt_code.getNum(num, 4) } return num.toString(16) }; lt_code.form16To10 = function (num) { return parseInt(num, 16) }; lt_code.show = function (dom, timer) { switch (arguments.length) { case 1: dom.style.display = "block"; break; case 2: dom.style.transitionDuration = timer + "s"; dom.style.opacity = "1"; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 1000); break; default: if (arguments.length !== 0) { console.log("show函数输入错误!") } else { console.log("show函数没有输入值!") } } }; lt_code.disappear = function (dom, timer, ISwate) { switch (arguments.length) { case 1: dom.style.display = "none"; break; case 2: dom.style.transitionDuration = timer + "s"; dom.style.opacity = "0"; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 950); break; case 3: if (typeof (ISwate) !== "boolean") { console.log("disappear函数ISwate参数输入参数出错!") } else { if (ISwate) { dom.style.transitionDuration = timer + "s"; dom.style.opacity = "0"; setTimeout(function () { dom.style.display = "none"; dom.style.webkitAnimation = "" }, timer * 950) } } break; default: if (arguments.length !== 0) { console.log("disppear函数输入错误!") } else { console.log("disppear函数没有输入值!") } } }; lt_code.getNum = function (text, types) { switch (arguments.length) { case 1: return parseInt(text); case 2: if (types === 1) { return parseInt(text.replace(/[^0-9]/ig, "")) } else if (types === 2) { return parseInt(/^\D*(?=\d)/.exec(text)) } else if (types === 3) { return parseInt(text.replace(/[^0-9]*/, "")) } else if (types === 4) { return parseInt(/-?[0-9]{1,}/i.exec(text)) } else if (types === 5) { return parseInt(/-?[\d]+\.?[\d]{0,}/.exec(text)) } else { console.log("getNum函数,type参数输入错误!") } break; default: if (arguments.length !== 0) { console.log("getNum函数输入错误!") } else { console.log("getNum函数没有输入值!") } } }; lt_code.changeHeight = function (dom, from, to, timer) { if (!!this.lt_css) { this.lt_css.innerHTML = "@-webkit-keyframes change_height{from{ height:" + from + "px;}to{ height:" + to + "px;}}"; switch (arguments.length) { case 3: dom.style.webkitAnimation = "change_height 1s"; dom.style.height = to + "px"; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000); break; case 4: dom.style.webkitAnimation = "change_height " + timer + "s"; dom.style.height = to + "px"; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 1000); break; default: console.log("changeHeight函数输入的参数有误!") } } else { console.log("特殊style空间不存在") } }; lt_code.changeHeight2 = function (dom, to, timer) { switch (arguments.length) { case 2: dom.style.transitionDuration = "1s"; dom.style.height = to + "px"; setTimeout(function () { dom.style.transitionDuration = "" }, 1000); break; case 3: dom.style.transitionDuration = timer + "s"; dom.style.height = to + "px"; setTimeout(function () { dom.style.transitionDuration = "" }, timer * 1000); break; default: console.log("changeHeight函数输入的参数有误!") } }; lt_code.changeWidth = function (dom, from, to, timer) { if (!!this.lt_css) { this.lt_css.innerHTML = "@-webkit-keyframes change_width{from{ width:" + from + "px;}to{ width:" + to + "px;}}"; switch (arguments.length) { case 3: dom.style.webkitAnimation = "change_width 1s"; dom.style.width = to + "px"; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000); break; case 4: dom.style.webkitAnimation = "change_width " + timer + "s"; dom.style.width = to + "px"; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 1000); break; default: console.log("changeWidth函数输入的参数有误!") } } else { console.log("特殊style空间不存在") } }; lt_code.changeWidth2 = function (dom, to, timer) { switch (arguments.length) { case 2: dom.style.transitionDuration = "1s"; dom.style.width = to + "px"; setTimeout(function () { dom.style.transitionDuration = "" }, 1000); break; case 3: dom.style.transitionDuration = timer + "s"; dom.style.width = to + "px"; setTimeout(function () { dom.style.transitionDuration = "" }, timer * 1000); break; default: console.log("changeWidth函数输入的参数有误!") } }; lt_code.changeWidth3 = function (dom, to, timer) { if (to > 100) { console.log("changeWidth3警告:变动的百分比大于100%") } switch (arguments.length) { case 2: dom.style.transitionDuration = "1s"; dom.style.width = to + "%"; setTimeout(function () { dom.style.transitionDuration = "" }, 1000); break; case 3: dom.style.transitionDuration = timer + "s"; dom.style.width = to + "%"; setTimeout(function () { dom.style.transitionDuration = "" }, timer * 1000); break; default: console.log("changeWidth函数输入的参数有误!") } }; lt_code.changeColor = function (dom, from, to, timer, ISbackgroundColor) { if (!!this.lt_css) { this.lt_css.innerHTML = "@-webkit-keyframes change_color{from{ color:" + from + ";}to{ color:" + to + ";}}@-webkit-keyframes change_backgroundColor{from{background-color:" + from + ";}to{background-color:" + to + ";}}"; switch (arguments.length) { case 3: dom.style.webkitAnimation = "change_color 1s"; dom.style.color = to; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000); break; case 4: dom.style.webkitAnimation = "change_color " + timer + "s"; dom.style.color = to; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 1000); break; case 5: if (!ISbackgroundColor) { dom.style.webkitAnimation = "change_color " + timer + "s"; dom.style.color = to; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 1000); break } else { dom.style.webkitAnimation = "change_backgroundColor " + timer + "s"; dom.style.backgroundColor = to; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 1000) } break; default: console.log("changeColor函数输入的参数有误!") } } else { console.log("特殊style空间不存在!") } }; lt_code.changeBoxShadow = function (dom, x, z, colors, types, timer, ISinset) { if (!!this.lt_css) { switch (arguments.length) { case 2: this.lt_css.innerHTML = "@-webkit-keyframes change_boxShadow{from{ box-shadow:0px 0px 0px #888;}to{ box-shadow:" + x + "px " + x + "px 5px #888;}}"; dom.style.webkitAnimation = "change_boxShadow 1s"; dom.style.boxShadow = x + "px " + x + "px 5px #888"; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000); break; case 3: this.lt_css.innerHTML = "@-webkit-keyframes change_boxShadow{from{ box-shadow:0px 0px 0px #888;}to{ box-shadow:" + x + "px " + x + "px " + z + "px #888;}}"; dom.style.webkitAnimation = "change_boxShadow 1s"; dom.style.boxShadow = x + "px " + x + "px " + z + "px #888"; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000); break; case 4: this.lt_css.innerHTML = "@-webkit-keyframes change_boxShadow{from{ box-shadow:0px 0px 0px " + colors + ";}to{ box-shadow:" + x + "px " + x + "px " + z + "px " + colors + ";}}"; dom.style.webkitAnimation = "change_boxShadow 1s"; dom.style.boxShadow = x + "px " + x + "px " + z + "px " + colors; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000); break; case 5: var y = x; switch (types) { case 1: x = 0; y = -y; break; case 2: y = 0; break; case 3: x = 0; break; case 4: x = -x; y = 0; break; case 5: x = -x; y = -y; break; case 6: y = -y; break; case 7: break; case 8: x = -x; break; case 9: this.lt_css.innerHTML = "@-webkit-keyframes change_boxShadow{from{ box-shadow:0px 0px 0px " + colors + ";}to{ box-shadow:" + x + "px " + x + "px " + z + "px " + colors + "," + -x + "px " + -x + "px " + z + "px " + colors + "," + x + "px " + -x + "px " + z + "px " + colors + "," + -x + "px " + x + "px " + z + "px " + colors + ";}}"; break; default: console.log("changeBoxShadow函数,types值输入错误!") }if (types !== 9) { this.lt_css.innerHTML = "@-webkit-keyframes change_boxShadow{from{ box-shadow:0px 0px 0px " + colors + ";}to{ box-shadow:" + x + "px " + y + "px " + z + "px " + colors + ";}}"; dom.style.webkitAnimation = "change_boxShadow 1s"; dom.style.boxShadow = x + "px " + y + "px " + z + "px " + colors; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000) } else { dom.style.webkitAnimation = "change_boxShadow 1s"; dom.style.boxShadow = x + "px " + x + "px " + z + "px " + colors + "," + -x + "px " + -x + "px " + z + "px " + colors + "," + x + "px " + -x + "px " + z + "px " + colors + "," + -x + "px " + x + "px " + z + "px " + colors; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000) } break; case 6: var y = x; switch (types) { case 1: x = 0; y = -y; break; case 2: y = 0; break; case 3: x = 0; break; case 4: x = -x; y = 0; break; case 5: x = -x; y = -y; break; case 6: y = -y; break; case 7: break; case 8: x = -x; break; case 9: this.lt_css.innerHTML = "@-webkit-keyframes change_boxShadow{from{ box-shadow:0px 0px 0px " + colors + ";}to{ box-shadow:" + x + "px " + x + "px " + z + "px " + colors + "," + -x + "px " + -x + "px " + z + "px " + colors + "," + x + "px " + -x + "px " + z + "px " + colors + "," + -x + "px " + x + "px " + z + "px " + colors + ";}}"; break; default: console.log("changeBoxShadow函数,types值输入错误!") }if (types !== 9) { this.lt_css.innerHTML = "@-webkit-keyframes change_boxShadow{from{ box-shadow:0px 0px 0px " + colors + ";}to{ box-shadow:" + x + "px " + y + "px " + z + "px " + colors + ";}}"; dom.style.webkitAnimation = "change_boxShadow " + timer + "s"; dom.style.boxShadow = x + "px " + y + "px " + z + "px " + colors; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 1000) } else { dom.style.webkitAnimation = "change_boxShadow " + timer + "s"; dom.style.boxShadow = x + "px " + x + "px " + z + "px " + colors + "," + -x + "px " + -x + "px " + z + "px " + colors + "," + x + "px " + -x + "px " + z + "px " + colors + "," + -x + "px " + x + "px " + z + "px " + colors; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 1000) } break; case 7: if (ISinset) { var y = x; switch (types) { case 1: x = 0; y = -y; break; case 2: y = 0; break; case 3: x = 0; break; case 4: x = -x; y = 0; break; case 5: x = -x; y = -y; break; case 6: y = -y; break; case 7: break; case 8: x = -x; break; case 9: this.lt_css.innerHTML = "@-webkit-keyframes change_boxShadow{from{ box-shadow:0px 0px 0px " + colors + " inset;}to{ box-shadow:" + x + "px " + x + "px " + z + "px " + colors + " inset," + -x + "px " + -x + "px " + z + "px " + colors + " inset," + x + "px " + -x + "px " + z + "px " + colors + " inset," + -x + "px " + x + "px " + z + "px " + colors + " inset;}}"; break; default: console.log("changeBoxShadow函数,types值输入错误!") }if (types !== 9) { this.lt_css.innerHTML = "@-webkit-keyframes change_boxShadow{from{ box-shadow:0px 0px 0px " + colors + " inset;}to{ box-shadow:" + x + "px " + y + "px " + z + "px " + colors + " inset;}}"; dom.style.webkitAnimation = "change_boxShadow " + timer + "s"; dom.style.boxShadow = x + "px " + y + "px " + z + "px " + colors + " inset"; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 1000) } else { dom.style.webkitAnimation = "change_boxShadow " + timer + "s"; dom.style.boxShadow = x + "px " + x + "px " + z + "px " + colors + " inset," + -x + "px " + -x + "px " + z + "px " + colors + " inset," + x + "px " + -x + "px " + z + "px " + colors + " inset," + -x + "px " + x + "px " + z + "px " + colors + " inset"; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 1000) } } else { var y = x; switch (types) { case 1: x = 0; y = -y; break; case 2: y = 0; break; case 3: x = 0; break; case 4: x = -x; y = 0; break; case 5: x = -x; y = -y; break; case 6: y = -y; break; case 7: break; case 8: x = -x; break; case 9: this.lt_css.innerHTML = "@-webkit-keyframes change_boxShadow{from{ box-shadow:0px 0px 0px " + colors + ";}to{ box-shadow:" + x + "px " + x + "px " + z + "px " + colors + "," + -x + "px " + -x + "px " + z + "px " + colors + "," + x + "px " + -x + "px " + z + "px " + colors + "," + -x + "px " + x + "px " + z + "px " + colors + ";}}"; break; default: console.log("changeBoxShadow函数,types值输入错误!") }if (types !== 9) { this.lt_css.innerHTML = "@-webkit-keyframes change_boxShadow{from{ box-shadow:0px 0px 0px " + colors + ";}to{ box-shadow:" + x + "px " + y + "px " + z + "px " + colors + ";}}"; dom.style.webkitAnimation = "change_boxShadow " + timer + "s"; dom.style.boxShadow = x + "px " + y + "px " + z + "px " + colors; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 1000) } else { dom.style.webkitAnimation = "change_boxShadow " + timer + "s"; dom.style.boxShadow = x + "px " + x + "px " + z + "px " + colors + "," + -x + "px " + -x + "px " + z + "px " + colors + "," + x + "px " + -x + "px " + z + "px " + colors + "," + -x + "px " + x + "px " + z + "px " + colors; setTimeout(function () { dom.style.webkitAnimation = "" }, timer * 1000) } } break; default: console.log("changeBoxShadow函数参数输入错误！") } } else { console.log("特殊style空间不存在!") } }; lt_code.changeBigerSmaller = function (doms, from, to, timer, ISwidth) { if (!this.lt_css) { console.log("特殊style空间不存在!") } else { var value1 = /\s{0,}[\<]?/.exec(doms.innerHTML)[0]; value1 = value1.replace(/[^\<]?/ig, ""); if (!value1) { this.lt_css.innerHTML = "@-webkit-keyframes change_fontSize{from{ font-size:" + from + "px;}to{ font-size:" + to + "px;}}"; switch (arguments.length) { case 3: doms.style.webkitAnimation = "change_fontSize 1s"; doms.style.fontSize = to + "px"; setTimeout(function () { doms.style.webkitAnimation = "" }, 1000); break; case 4: doms.style.webkitAnimation = "change_fontSize " + timer + "s"; doms.style.fontSize = to + "px"; setTimeout(function () { doms.style.webkitAnimation = "" }, timer * 1000); break; case 5: console.log("changeBigerSmaller函数在输入的doms内容里面没有立即读取到标签会判定为改变字号大小,无需输入第五个参数"); break; default: console.log("changeBigerSmaller函数输入的参数出错!") } } else { switch (arguments.length) { case 3: this.changeWidth(doms, from, to); break; case 4: this.changeWidth(doms, from, to, timer); break; case 5: if (ISwidth) { this.changeWidth(doms, from, to, timer) } else { this.changeHeight(doms, from, to, timer) } break; default: console.log("changeBigerSmaller函数输入的参数出错!") } } } }; lt_code.makeMoveBox = function (dom) { var offLeft; var offTop; dom.style.position = "absolute"; dom.style.Mozusers_moveToelect = "none"; dom.style.users_moveToelect = "none"; var scrollHeight = window.screen.availHeight; var scrollWidth = window.screen.availWidth; var max_width; var max_height; if (lt_code.getDomFather(dom) === lt_code.getAll()) { max_width = scrollWidth - dom.offsetWidth; max_height = scrollHeight - dom.offsetHeight } else { max_width = lt_code.getDomFather(dom).offsetWidth - dom.offsetWidth; max_height = lt_code.getDomFather(dom).offsetHeight = dom.offsetHeight } dom.onmousedown = function (e) { offLeft = dom.offsetLeft; offLeft = e.clientX - offLeft; offTop = dom.offsetTop; offTop = e.clientY - offTop; if (lt_code.getDomFather(dom) === lt_code.getAll()) { max_width = scrollWidth - dom.offsetWidth; max_height = scrollHeight - dom.offsetHeight } else { max_width = lt_code.getDomFather(dom).offsetWidth - dom.offsetWidth; max_height = lt_code.getDomFather(dom).offsetHeight = dom.offsetHeight } document.onmousemove = function (e) { e = event || document.body.event; var move_x = e.clientX - offLeft; move_x = move_x > max_width ? max_width : move_x; var move_y = e.clientY - offTop; move_y = move_y > max_height ? max_height : move_y; dom.style.left = (move_x > 0 ? move_x : 0) + "px"; dom.style.top = (move_y > 0 ? move_y : 0) + "px" } }; dom.onmouseup = function () { offTop = 0; offLeft = 0; document.onmousemove = function (e) { e = 0 } }; dom.onmouseout = function () { offTop = 0; offLeft = 0; document.onmousemove = function (e) { e = 0 } } }; lt_code.moveBox = function (dom, changeWidth, changeHeight, time) { if (!this.lt_css) { console.log("特殊style样式空间不存在!"); return } else { if (dom.style.position === "static") { console.log("moveBox函数报错:此物件属性为static不能移动!"); return } else if (dom.style.position === "") { } } switch (arguments.length) { case 2: var fromW = this.getNum(dom.style.left); fromW = !!fromW ? fromW : 0; var toW = fromW + changeWidth; this.lt_css.innerHTML = "@-webkit-keyframes change_left{from{ left:" + fromW + "px;}to{ left:" + toW + "px;}}"; dom.style.webkitAnimation = "change_left 1s"; dom.style.left = toW + "px"; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000); break; case 3: var fromW = this.getNum(dom.style.left); var fromH = this.getNum(dom.style.top); fromW = fromW ? fromW : 0; fromH = fromH ? fromH : 0; var toW = fromW + changeWidth; var toH = fromH + changeHeight; this.lt_css.innerHTML = "@-webkit-keyframes change_leftAndTop{from{ left:" + fromW + "px;top:" + fromH + "px;}to{ left:" + toW + "px;top:" + toH + "px;}}"; dom.style.webkitAnimation = "change_leftAndTop 1s"; dom.style.left = toW + "px"; dom.style.top = toH + "px"; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000); break; case 4: var fromW = this.getNum(dom.style.left); var fromH = this.getNum(dom.style.top); fromW = fromW ? fromW : 0; fromH = fromH ? fromH : 0; var toW = fromW + changeWidth; var toH = fromH + changeHeight; this.lt_css.innerHTML = "@-webkit-keyframes change_leftAndTop{from{ left:" + fromW + "px;top:" + fromH + "px;}to{ left:" + toW + "px;top:" + toH + "px;}}"; dom.style.webkitAnimation = "change_leftAndTop " + time + "s"; dom.style.left = toW + "px"; dom.style.top = toH + "px"; setTimeout(function () { dom.style.webkitAnimation = "" }, time * 1000); break; default: } }; lt_code.moveBoxTo = function (dom, changeWidth, changeHeight, time) { if (!this.lt_css) { console.log("特殊style样式空间不存在!"); return } else { if (dom.style.position === "static") { console.log("moveBox函数报错:此物件属性为static不能移动!"); return } else if (dom.style.position === "") { } } switch (arguments.length) { case 2: var fromW = this.getNum(dom.style.left); fromW = !!fromW ? fromW : 0; var toW = changeWidth; this.lt_css.innerHTML += "@-webkit-keyframes change_left" + this.variable.users_moveTo + "{from{ left:" + fromW + "px;}to{ left:" + toW + "px;}}"; dom.style.webkitAnimation = "change_left" + this.variable.users_moveTo + " 1s"; dom.style.left = toW + "px"; setTimeout(function () { dom.style.webkitAnimation = ""; lt_code.clearAll() }, 1000); break; case 3: var fromW = this.getNum(dom.style.left); var fromH = this.getNum(dom.style.top); fromW = fromW ? fromW : 0; fromH = fromH ? fromH : 0; var toW = changeWidth; var toH = changeHeight; this.lt_css.innerHTML += "@-webkit-keyframes change_leftAndTop" + this.variable.users_moveTo + "{from{ left:" + fromW + "px;top:" + fromH + "px;}to{ left:" + toW + "px;top:" + toH + "px;}}"; dom.style.webkitAnimation = "change_leftAndTop" + this.variable.users_moveTo + " 1s"; dom.style.left = toW + "px"; dom.style.top = toH + "px"; setTimeout(function () { dom.style.webkitAnimation = ""; lt_code.clearAll() }, 1000); break; case 4: var fromW = this.getNum(dom.style.left); var fromH = this.getNum(dom.style.top); fromW = fromW ? fromW : 0; fromH = fromH ? fromH : 0; var toW = changeWidth; var toH = changeHeight; this.lt_css.innerHTML += "@-webkit-keyframes change_leftAndTop" + this.variable.users_moveTo + "{from{ left:" + fromW + "px;top:" + fromH + "px;}to{ left:" + toW + "px;top:" + toH + "px;}}"; dom.style.webkitAnimation = "change_leftAndTop" + this.variable.users_moveTo + " " + time + "s"; dom.style.left = toW + "px"; dom.style.top = toH + "px"; setTimeout(function () { dom.style.webkitAnimation = ""; lt_code.clearAll() }, time * 1000); break; default: }this.variable.users_moveTo++ }; lt_code.moveBoxTo2 = function (dom, changeWidth, changeHeight, time) { if (!dom) { console.log("moveBoxTo2函数报错:移动对象不存在!"); return } else if (dom.style.position === "static") { console.log("moveBox函数报错:此物件属性为static不能移动!"); return } else if (dom.style.position === "") { } switch (arguments.length) { case 2: var toW = changeWidth; dom.style.transitionDuration = "1s"; dom.style.left = toW + "px"; setTimeout(function () { dom.style.transitionDuration = "" }, 1000); break; case 3: var toW = changeWidth; var toH = changeHeight; dom.style.transitionDuration = "1s"; dom.style.left = toW + "px"; if (lt_code.moveBoxTo2.useBottom) { dom.style.bottom = toH + "px" } else { dom.style.top = toH + "px" } setTimeout(function () { dom.style.transitionDuration = "" }, 1000); break; case 4: var toW = changeWidth; var toH = changeHeight; dom.style.transitionDuration = time + "s"; dom.style.left = toW + "px"; if (lt_code.moveBoxTo2.useBottom) { dom.style.bottom = toH + "px" } else { dom.style.top = toH + "px" } setTimeout(function () { dom.style.transitionDuration = "" }, time * 1000); break; default: console.log("moveBoxTo2函数参数输入出错!") } }; lt_code.moveBoxTo2.useBottom = false; lt_code.moveBoxShow = function (dom, changeWidth, changeHeight, time) { if (!this.lt_css) { console.log("特殊style样式空间不存在!"); return } else { if (dom.style.position === "static") { console.log("moveBoxShow函数报错:此物件属性为static不能移动!"); return } else if (dom.style.position === "") { } } switch (arguments.length) { case 2: var fromW = this.getNum(dom.style.left); fromW = !!fromW ? fromW : 0; var toW = fromW + changeWidth; this.lt_css.innerHTML = "@-webkit-keyframes change_left{from{ left:" + fromW + "px;opacity:0;}to{ left:" + toW + "px;opacity:1;}}"; dom.style.webkitAnimation = "change_left 1s"; dom.style.left = toW + "px"; dom.style.opacity = "1"; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000); break; case 3: var fromW = this.getNum(dom.style.left); var fromH = this.getNum(dom.style.top); fromW = fromW ? fromW : 0; fromH = fromH ? fromH : 0; var toW = fromW + changeWidth; var toH = fromH + changeHeight; this.lt_css.innerHTML = "@-webkit-keyframes change_leftAndTop{from{ left:" + fromW + "px;top:" + fromH + "px;opacity:0;}to{ left:" + toW + "px;top:" + toH + "px;opacity:1;}}"; dom.style.webkitAnimation = "change_leftAndTop 1s"; dom.style.left = toW + "px"; dom.style.top = toH + "px"; dom.style.opacity = "1"; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000); break; case 4: var fromW = this.getNum(dom.style.left); var fromH = this.getNum(dom.style.top); fromW = fromW ? fromW : 0; fromH = fromH ? fromH : 0; var toW = fromW + changeWidth; var toH = fromH + changeHeight; this.lt_css.innerHTML = "@-webkit-keyframes change_leftAndTop{from{ left:" + fromW + "px;top:" + fromH + "px;opacity:0;}to{ left:" + toW + "px;top:" + toH + "px;opacity:1;}}"; dom.style.webkitAnimation = "change_leftAndTop " + time + "s"; dom.style.left = toW + "px"; dom.style.top = toH + "px"; dom.style.opacity = "1"; setTimeout(function () { dom.style.webkitAnimation = "" }, time * 1000); break; default: console.log("moveBoxShow函数输入出错!") } }; lt_code.moveBoxDisappear = function (dom, changeWidth, changeHeight, time, ISdisappear) { if (!this.lt_css) { console.log("特殊style样式空间不存在!"); return } else { if (dom.style.position === "static") { console.log("moveBoxShow函数报错:此物件属性为static不能移动!"); return } else if (dom.style.position === "") { } } switch (arguments.length) { case 2: var fromW = this.getNum(dom.style.left); fromW = !!fromW ? fromW : 0; var toW = fromW + changeWidth; this.lt_css.innerHTML = "@-webkit-keyframes change_left{from{ left:" + fromW + "px;opacity:1;}to{ left:" + toW + "px;opacity:0;}}"; dom.style.webkitAnimation = "change_left 1s"; dom.style.left = toW + "px"; dom.style.opacity = "0"; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000); break; case 3: var fromW = this.getNum(dom.style.left); var fromH = this.getNum(dom.style.top); fromW = fromW ? fromW : 0; fromH = fromH ? fromH : 0; var toW = fromW + changeWidth; var toH = fromH + changeHeight; this.lt_css.innerHTML = "@-webkit-keyframes change_leftAndTop{from{ left:" + fromW + "px;top:" + fromH + "px;opacity:1;}to{ left:" + toW + "px;top:" + toH + "px;opacity:0;}}"; dom.style.webkitAnimation = "change_leftAndTop 1s"; dom.style.left = toW + "px"; dom.style.top = toH + "px"; dom.style.opacity = "0"; setTimeout(function () { dom.style.webkitAnimation = "" }, 1000); break; case 4: var fromW = this.getNum(dom.style.left); var fromH = this.getNum(dom.style.top); fromW = fromW ? fromW : 0; fromH = fromH ? fromH : 0; var toW = fromW + changeWidth; var toH = fromH + changeHeight; this.lt_css.innerHTML = "@-webkit-keyframes change_leftAndTop{from{ left:" + fromW + "px;top:" + fromH + "px;opacity:1;}to{ left:" + toW + "px;top:" + toH + "px;opacity:0;}}"; dom.style.webkitAnimation = "change_leftAndTop " + time + "s"; dom.style.left = toW + "px"; dom.style.top = toH + "px"; dom.style.opacity = "0"; setTimeout(function () { dom.style.webkitAnimation = "" }, time * 1000); break; case 5: var fromW = this.getNum(dom.style.left); var fromH = this.getNum(dom.style.top); fromW = fromW ? fromW : 0; fromH = fromH ? fromH : 0; var toW = fromW + changeWidth; var toH = fromH + changeHeight; this.lt_css.innerHTML = "@-webkit-keyframes change_leftAndTop{from{ left:" + fromW + "px;top:" + fromH + "px;opacity:1;}to{ left:" + toW + "px;top:" + toH + "px;opacity:0;}}"; dom.style.webkitAnimation = "change_leftAndTop " + time + "s"; dom.style.left = toW + "px"; dom.style.top = toH + "px"; dom.style.opacity = "0"; setTimeout(function () { dom.style.webkitAnimation = ""; if (ISdisappear) { dom.style.display = "none" } }, time * 1000); break; default: console.log("moveBoxShow函数输入出错!") } }; lt_code.moveBox2 = function (dom, changeWidth, changeHeight, time) { if (dom.style.position === "static") { console.log("moveBox函数报错:此物件属性为static不能移动!"); return } else if (dom.style.position === "") { dom.style.position = "absolute" } switch (arguments.length) { case 2: var fromW = this.getNum(dom.style.left); fromW = !!fromW ? fromW : 0; var toW = fromW + changeWidth; dom.style.left = toW + "px"; dom.style.transition = "all 1s ease-out"; setTimeout(function () { dom.style.transition = "" }, 1000); break; case 3: var fromW = this.getNum(dom.style.left); var fromH = this.getNum(dom.style.top); fromW = fromW ? fromW : 0; fromH = fromH ? fromH : 0; var toW = fromW + changeWidth; var toH = fromH + changeHeight; dom.style.left = toW + "px"; dom.style.height = toH + "px"; dom.style.transition = "all 1s ease-out"; setTimeout(function () { dom.style.transition = "" }, 1000); break; case 4: var fromW = this.getNum(dom.style.left); var fromH = this.getNum(dom.style.top); fromW = fromW ? fromW : 0; fromH = fromH ? fromH : 0; var toW = fromW + changeWidth; var toH = fromH + changeHeight; dom.style.left = toW + "px"; dom.style.height = toH + "px"; dom.style.transition = "all " + time + "s ease-out"; setTimeout(function () { dom.style.transition = "" }, time * 1000); break; default: console.log("moveBox2函数输入错误!") } }; lt_code.makeNestleMouse = function (dom, time) { if (arguments.length === 0) { console.log("makeNestleMouse函数报错:没有输入值!"); return } else if (typeof (dom) !== "object") { console.log("makeNestltMouse函数报错:输入的dom值出错!"); return } dom.style.position = "absolute"; var dom_width = this.getNum(dom.offsetWidth); var dom_height = this.getNum(dom.offsetHeight); var dom_left = this.getNum(dom.offsetLeft); var dom_top = this.getNum(dom.offsetTop); var ISonBody = false; document.body.onmouseover = function () { ISonBody = true }; document.body.onmouseout = function () { ISonBody = false }; setInterval(function () { if (ISonBody) { var e = event || window.event; if (!e) { console.log("makeNestleMouse函数报错:鼠标没有在当前文档上!") } else { switch (arguments.length) { case 1: if ((parseInt(dom.height / 2) + dom_top) !== e.clientY || (parseInt(dom.width / 2) + dom_left) !== e.clientX) { dom.style.left = parseInt((e.clientX - parseInt(dom_width / 2) + dom_left) / 4); dom.style.top = parseInt((e.clientY - parseInt(dom_height / 2) + dom_top) / 4) } break; case 2: if ((parseInt(dom.height / 2) + dom_top) !== e.clientY || (parseInt(dom.width / 2) + dom_left) !== e.clientX) { dom.style.left = parseInt((e.clientX - parseInt(dom_width / 2) + dom_left) / 4); dom.style.top = parseInt((e.clientY - parseInt(dom_height / 2) + dom_top) / 4) } break; default: console.log("makeNestleMouse函数出错:参数输入过多!") } } } }(time ? 1 : time) * 10) }; lt_code.makeMoveBox2 = function (dom, IsOnlyLeft) { switch (arguments.length) { case 1: lt_code.makeMoveBox(dom); break; case 2: if (IsOnlyLeft) { var e; var offLeft; var dom_left; dom.style.position = "absolute"; var scrollWidth = window.screen.availWidth; var max_width = scrollWidth - dom.offsetWidth; dom.onmousedown = function (e) { offLeft = dom.offsetLeft; offLeft = e.clientX - offLeft; document.onmousemove = function (e) { e = event || document.event; console.log(e); var move_x = e.clientX - offLeft; if (max_width < 0) { move_x = move_x < max_width ? max_width : move_x; dom.style.left = (move_x < 0 ? move_x : 0) + "px" } else { move_x = move_x > max_width ? max_width : move_x; dom.style.left = (move_x > 0 ? move_x : 0) + "px" } } }; dom.onmouseup = function () { offLeft = 0; document.onmousemove = function (e) { e = 0 } }; dom.onmouseout = function () { offLeft = 0; document.onmousemove = function (e) { e = 0 } } } else { var e; var offTop; var dom_top; dom.style.position = "absolute"; var scrollHeight = window.screen.availHeight; var max_height = scrollHeight - dom.offsetHeight; dom.onmousedown = function (e) { offTop = dom.offsetTop; offTop = e.clientY - offTop; document.onmousemove = function (e) { e = event || document.body.event; var move_y = e.clientY - offTop; if (max_height < 0) { move_y = move_y < max_height ? max_height : move_y; dom.style.left = (move_y < 0 ? move_y : 0) + "px" } else { move_y = move_y > max_height ? max_height : move_y; dom.style.left = (move_y > 0 ? move_y : 0) + "px" } } }; dom.onmouseup = function () { offTop = 0; document.onmousemove = function (e) { e = 0 } }; dom.onmouseout = function () { offTop = 0; document.onmousemove = function (e) { e = 0 } } } break; default: console.log("makeMoveBox2函数输入参数出错!") } }; lt_code.mouseBoxShadow = function (dom, e, colors, boxShadow_z, moves) { var t = document.body.scrollTop || document.documentElement.scrollTop; switch (arguments.length) { case 3: var boxShadow_x; var boxShadow_y; boxShadow_z = 5; moves = 0.1; var dom_x = dom.offsetLeft + dom.offsetWidth / 2; var dom_y = dom.offsetTop + dom.offsetHeight / 2; boxShadow_x = dom_x - e.clientX; boxShadow_y = dom_y - e.clientY - t; boxShadow_x = boxShadow_x * moves; boxShadow_y = boxShadow_y * moves; boxShadow_x = (parseInt((boxShadow_x > boxShadow_z ? boxShadow_z : boxShadow_x) * 100)) / 100; boxShadow_y = (parseInt((boxShadow_y > boxShadow_z ? boxShadow_z : boxShadow_y) * 100)) / 100; boxShadow_x = (parseInt((boxShadow_x < -boxShadow_z ? -boxShadow_z : boxShadow_x) * 100)) / 100; boxShadow_y = (parseInt((boxShadow_y < -boxShadow_z ? -boxShadow_z : boxShadow_y) * 100)) / 100; dom.style.boxShadow = boxShadow_x + "px " + boxShadow_y + "px " + boxShadow_z + "px " + colors; break; case 4: var boxShadow_x; var boxShadow_y; moves = 0.1; var dom_x = dom.offsetLeft + dom.offsetWidth / 2; var dom_y = dom.offsetTop + dom.offsetHeight / 2; boxShadow_x = dom_x - e.clientX; boxShadow_y = dom_y - e.clientY - t; boxShadow_x = boxShadow_x * moves; boxShadow_y = boxShadow_y * moves; boxShadow_x = (parseInt((boxShadow_x > boxShadow_z ? boxShadow_z : boxShadow_x) * 100)) / 100; boxShadow_y = (parseInt((boxShadow_y > boxShadow_z ? boxShadow_z : boxShadow_y) * 100)) / 100; boxShadow_x = (parseInt((boxShadow_x < -boxShadow_z ? -boxShadow_z : boxShadow_x) * 100)) / 100; boxShadow_y = (parseInt((boxShadow_y < -boxShadow_z ? -boxShadow_z : boxShadow_y) * 100)) / 100; dom.style.boxShadow = boxShadow_x + "px " + boxShadow_y + "px " + boxShadow_z + "px " + colors; break; case 5: var boxShadow_x; var boxShadow_y; moves = moves / 100; var dom_x = dom.offsetLeft + dom.offsetWidth / 2; var dom_y = dom.offsetTop + dom.offsetHeight / 2; boxShadow_x = dom_x - e.clientX; boxShadow_y = dom_y - e.clientY - t; boxShadow_x = boxShadow_x * moves; boxShadow_y = boxShadow_y * moves; boxShadow_x = (boxShadow_x > boxShadow_z ? boxShadow_z : boxShadow_x); boxShadow_y = (boxShadow_y > boxShadow_z ? boxShadow_z : boxShadow_y); boxShadow_x = (parseInt((boxShadow_x < -boxShadow_z ? -boxShadow_z : boxShadow_x) * 100)) / 100; boxShadow_y = (parseInt((boxShadow_y < -boxShadow_z ? -boxShadow_z : boxShadow_y) * 100)) / 100; dom.style.boxShadow = boxShadow_x + "px " + boxShadow_y + "px " + boxShadow_z + "px " + colors; break; default: console.log("mouseBoxShadow函数输入参数出错!") } }; lt_code.make3DBox = function (dom, changeSize, maxChange, doms) { if (dom) { var dom_mean = dom.outerHTML; if (doms !== 0) { doms = doms ? doms : 1 } dom.id = !dom.id ? "dom" + doms : dom.id; var dom_id = dom.id; dom.setAttribute("id", "dom_father" + doms); dom = lt_code.getId("dom_father" + doms); dom.innerHTML = dom_mean; dom.style.transformStyle = "preserve-3d"; dom.style.perspective = "1200px"; var child_dom = lt_code.getId(dom_id); changeSize = !changeSize ? 0.1 : changeSize / 100; maxChange = !maxChange ? 6 : (maxChange > 12 ? 12 : (maxChange < 0 ? 0 : maxChange)); dom.onmousemove = function (e) { e = e || window.event; var child_left = child_dom.offsetLeft + child_dom.offsetWidth / 2; var child_top = child_dom.offsetTop + child_dom.offsetHeight / 2; var change_X = e.clientX - child_left; var change_Y = e.clientY - child_top; change_X = change_X * changeSize; change_Y = change_Y * changeSize; change_X = change_X > maxChange ? maxChange : change_X; change_Y = change_Y > maxChange ? maxChange : change_Y; change_X = change_X < -maxChange ? -maxChange : change_X; change_Y = change_Y < -maxChange ? -maxChange : change_Y; change_X = parseInt(change_X * 100) / 100; change_Y = parseInt(change_Y * 100) / 100; child_dom.style.transform = "rotateX(" + -change_Y + "deg) rotateY(" + change_X + "deg)" } } else { console.log("make3DBox函数参数输入错误!") } }; lt_code.make3DImg = function (dom) { }; lt_code.make3DImgTrun = function (dom, trunDeg, type) { if (dom.id.length === 0) { console.log("make3DImgTrun函数没有找到对象的id") } else { switch (arguments.length) { case 2: var dom_mean = dom.innerHTML; var canChange_trun = true; var dom_id = dom.id; dom.innerHTML = "<div id =\"" + dom_id + "\"></div>"; dom.setAttribute("id", "dom_father"); dom = lt_code.getId("dom_father"); var dom_child = lt_code.getId(dom_id); dom.style.transformStyle = "preserve-3d"; dom.style.perspective = "1200px"; dom_child.innerHTML = dom_mean; dom.onmouseover = function () { if (canChange_trun) { dom_child.style.transitionDuration = "1s"; dom_child.style.transform = "rotateY(" + trunDeg + "deg)"; canChange_trun = false; setTimeout(function () { canChange_trun = true; dom_child.style.transitionDuration = "" }, 950) } }; dom.onmouseout = function () { if (canChange_trun) { canChange_trun = false; dom_child.style.transitionDuration = "1s"; dom_child.style.transform = "rotateY(" + 0 + "deg)"; setTimeout(function () { canChange_trun = true; dom_child.style.transitionDuration = "" }, 950) } }; break; case 3: if (type === 2) { var dom_mean = dom.innerHTML; var canChange_trun = true; var dom_id = dom.id; dom.innerHTML = "<div id =\"" + dom_id + "\"></div>"; dom.setAttribute("id", "dom_father"); dom = lt_code.getId("dom_father"); var dom_child = lt_code.getId(dom_id); dom.style.transformStyle = "preserve-3d"; dom.style.perspective = "1200px"; dom_child.innerHTML = dom_mean; dom.onmouseover = function () { if (canChange_trun) { dom_child.style.transitionDuration = "1s"; dom_child.style.transform = "rotateY(" + trunDeg + "deg)"; canChange_trun = false; setTimeout(function () { canChange_trun = true; dom_child.style.transitionDuration = "" }, 950) } }; dom.onmouseout = function () { if (canChange_trun) { canChange_trun = false; dom_child.style.transitionDuration = "1s"; dom_child.style.transform = "rotateY(" + 0 + "deg)"; setTimeout(function () { canChange_trun = true; dom_child.style.transitionDuration = "" }, 950) } } } else if (type === 1) { var dom_mean = dom.innerHTML; var canChange_trun = true; var dom_id = dom.id; dom.innerHTML = "<div id =\"" + dom_id + "\"></div>"; dom.setAttribute("id", "dom_father"); dom = lt_code.getId("dom_father"); var dom_child = lt_code.getId(dom_id); dom.style.transformStyle = "preserve-3d"; dom.style.perspective = "1200px"; dom_child.innerHTML = dom_mean; dom.onmouseover = function () { if (canChange_trun) { dom_child.style.transitionDuration = "1s"; dom_child.style.transform = "rotateX(" + trunDeg + "deg)"; canChange_trun = false; setTimeout(function () { canChange_trun = true; dom_child.style.transitionDuration = "" }, 950) } }; dom.onmouseout = function () { if (canChange_trun) { canChange_trun = false; dom_child.style.transitionDuration = "1s"; dom_child.style.transform = "rotateX(" + 0 + "deg)"; setTimeout(function () { canChange_trun = true; dom_child.style.transitionDuration = "" }, 950) } } } else if (type === 3) { var dom_mean = dom.innerHTML; var canChange_trun = true; var dom_id = dom.id; dom.innerHTML = "<div id =\"" + dom_id + "\"></div>"; dom.setAttribute("id", "dom_father"); dom = lt_code.getId("dom_father"); var dom_child = lt_code.getId(dom_id); dom.style.transformStyle = "preserve-3d"; dom.style.perspective = "1200px"; dom_child.innerHTML = dom_mean; dom.onmouseover = function () { if (canChange_trun) { dom_child.style.transitionDuration = "1s"; dom_child.style.transform = "rotateZ(" + trunDeg + "deg)"; canChange_trun = false; setTimeout(function () { canChange_trun = true; dom_child.style.transitionDuration = "" }, 950) } }; dom.onmouseout = function () { if (canChange_trun) { canChange_trun = false; dom_child.style.transitionDuration = "1s"; dom_child.style.transform = "rotateZ(" + 0 + "deg)"; setTimeout(function () { canChange_trun = true; dom_child.style.transitionDuration = "" }, 950) } } } else { console.log("make3DImgTrun函数type参数输入错误!") } break; default: console.log("make3DImgTrun函数输入参数出错!") } } }; lt_code.make3DTrun_inner = function (dom, trunDeg, child_name, type, times) { var dom_child = new Array(); switch (arguments.length) { case 3: if (dom.length && dom.length > 1 && dom.innerHTML !== "") { for (var i = 0; i < dom.length; i++) { dom[i].style.transformStyle = "preserve-3d"; dom[i].style.perspective = "1200px"; dom_child[i] = lt_code.getAll2(child_name, dom[i]); if (dom_child[i].length) { dom_child[i] = dom_child[i][0] } dom_child[i].style.transform = !dom_child[i].style.transform ? "rotateZ(0deg)" : dom_child[i].style.transform; dom_child[i].style.transitionDuration = "1s"; dom_child[i].style.transform = "rotateZ(" + trunDeg + "deg)" } } else if (dom.innerHTML !== "" && !dom.length) { dom.style.transformStyle = "preserve-3d"; dom.style.perspective = "1200px"; dom_child[0] = lt_code.getAll2(child_name, dom); if (dom_child[0].length) { dom_child[0] = dom_child[0][0] } dom_child[0].style.transform = !dom_child[0].style.transform ? "rotateZ(0deg)" : dom_child[0].style.transform; dom_child[0].style.transitionDuration = "1s"; dom_child[0].style.transform = "rotateZ(" + trunDeg + "deg)" } break; case 4: if (dom.length && dom.length > 1 && dom.innerHTML !== "") { for (var i = 0; i < dom.length; i++) { dom[i].style.transformStyle = "preserve-3d"; dom[i].style.perspective = "1200px"; dom_child[i] = lt_code.getAll2(child_name, dom[i]); if (dom_child[i].length) { dom_child[i] = dom_child[i][0] } dom_child[i].style.transform = !dom_child[i].style.transform ? "rotate(0deg)" : dom_child[i].style.transform; dom_child[i].style.transitionDuration = "1s"; if (type === 3) { dom_child[i].style.transform = "rotateZ(" + trunDeg + "deg)" } else if (type === 2) { dom_child[i].style.transform = "rotateY(" + trunDeg + "deg)" } else if (type === 1) { dom_child[i].style.transform = "rotateX(" + trunDeg + "deg)" } else { console.log("make3DTrun_inner函数type参数输入错误!") } } } else if (dom.innerHTML !== "" && !dom.length) { dom.style.transformStyle = "preserve-3d"; dom.style.perspective = "1200px"; dom_child[0] = lt_code.getAll2(child_name, dom); if (dom_child[0].length) { dom_child[0] = dom_child[0][0] } dom_child[0].style.transform = !dom_child[0].style.transform ? "rotateZ(0deg)" : dom_child[0].style.transform; dom_child[0].style.transitionDuration = "1s"; if (type === 3) { dom_child[0].style.transform = "rotateZ(" + trunDeg + "deg)" } else if (type === 2) { dom_child[0].style.transform = "rotateY(" + trunDeg + "deg)" } else if (type === 1) { dom_child[0].style.transform = "rotateX(" + trunDeg + "deg)" } else { console.log("make3DTrun_inner函数type参数输入错误!") } } break; case 5: if (dom.length && dom.length > 1 && dom.innerHTML !== "") { for (var i = 0; i < dom.length; i++) { dom[i].style.transformStyle = "preserve-3d"; dom[i].style.perspective = "1200px"; dom_child[i] = lt_code.getAll2(child_name, dom[i]); if (dom_child[i].length) { dom_child[i] = dom_child[i][0] } dom_child[i].style.transform = !dom_child[i].style.transform ? "rotate(0deg)" : dom_child[i].style.transform; dom_child[i].style.transitionDuration = times + "s"; if (type === 3) { dom_child[i].style.transform = "rotateZ(" + trunDeg + "deg)" } else if (type === 2) { dom_child[i].style.transform = "rotateY(" + trunDeg + "deg)" } else if (type === 1) { dom_child[i].style.transform = "rotateX(" + trunDeg + "deg)" } else { console.log("make3DTrun_inner函数type参数输入错误!") } } } else if (dom.innerHTML !== "" && !dom.length) { dom.style.transformStyle = "preserve-3d"; dom.style.perspective = "1200px"; dom_child[0] = lt_code.getAll2(child_name, dom); if (dom_child[0].length) { dom_child[0] = dom_child[0][0] } dom_child[0].style.transform = !dom_child[0].style.transform ? "rotateZ(0deg)" : dom_child[0].style.transform; dom_child[0].style.transitionDuration = times + "s"; if (type === 3) { dom_child[0].style.transform = "rotateZ(" + trunDeg + "deg)" } else if (type === 2) { dom_child[0].style.transform = "rotateY(" + trunDeg + "deg)" } else if (type === 1) { dom_child[0].style.transform = "rotateX(" + trunDeg + "deg)" } else { console.log("make3DTrun_inner函数type参数输入错误!") } } break; default: console.log("make3DTrun_inner函数参数输入错误!") }lt_code.make3DTrun_inner.clearAll = function () { for (var i = 0; i < dom_child.length; i++) { dom_child[i].style.transitionDuration = ""; dom_child[i].style.transform = "" } } }; lt_code.make3DTrun_inner.clearAll = function () { }; lt_code.innerClock = function (dom) { if (!dom) { console.log("innerClock函数对象不存在!") } else { dom.innerHTML += "<canvas id=\"clockCanvas\"></canvas>" } var WINDOW_HEIGHT = 768; var WINDOW_WIDTH = 1024; var GROUP_R = 8; var MARGIN_LEFT = 30; var MARGIN_TOP = 60; var ISCLOCK = true; var LOADTIME = 1; var ENDTIME = new Date(); var NOWDATE = new Date(); var MAXGROUP = 300; var balls = []; const colors = ["#33b5e5", "#09c", "#a6c", "#93c", "#9c0", "#690", "#fb3", "#f80", "#f80", "f44", "#c00"]; ENDTIME.setTime(ENDTIME.getTime() + (LOADTIME > 0 ? LOADTIME : 1) * 3600 * 1000); window.onload = function () { var canvas = document.getElementById("clockCanvas"); var context = canvas.getContext("2d"); canvas.width = WINDOW_WIDTH; canvas.height = WINDOW_HEIGHT; setInterval(function () { render(context, ISCLOCK); upDate() }, 50) }; function upDate() { var nextSeconds = getSeconds(new Date()); var nextHour = parseInt(nextSeconds / 3600); var nextMinutes = parseInt((nextSeconds % 3600) / 60); nextSeconds = nextSeconds % 60; var curSeconds = getSeconds(NOWDATE); var curHour = parseInt(curSeconds / 3600); var curMinutes = parseInt((curSeconds % 3600) / 60); curSeconds = curSeconds % 60; if (NOWDATE !== new Date()) { if ((parseInt(nextHour / 10) !== parseInt(curHour / 10))) { addBalls(MARGIN_LEFT, MARGIN_TOP, parseInt(curHour / 10)) } if (parseInt(curHour % 10) !== parseInt(nextHour % 10)) { addBalls(MARGIN_LEFT + 8 * 2 * (GROUP_R + 1), MARGIN_TOP, parseInt(curHour / 10)) } if (parseInt(curMinutes / 10) !== parseInt(nextMinutes / 10)) { addBalls(MARGIN_LEFT + 19 * 2 * (GROUP_R + 1), MARGIN_TOP, parseInt(curMinutes / 10)) } if (parseInt(curMinutes % 10) !== parseInt(nextMinutes % 10)) { addBalls(MARGIN_LEFT + 27 * 2 * (GROUP_R + 1), MARGIN_TOP, parseInt(curMinutes / 10)) } if (parseInt(curSeconds / 10) !== parseInt(nextSeconds / 10)) { addBalls(MARGIN_LEFT + 38 * 2 * (GROUP_R + 1), MARGIN_TOP, parseInt(curSeconds / 10)) } if (parseInt(curSeconds % 10) !== parseInt(nextSeconds % 10)) { addBalls(MARGIN_LEFT + 46 * 2 * (GROUP_R + 1), MARGIN_TOP, parseInt(curSeconds % 10)) } NOWDATE = new Date() } upDateBalls() } function addBalls(x, y, num) { for (var i = 0; i < lt_code.variable.digit[num].length; i++) { for (var j = 0; j < lt_code.variable.digit[num][i].length; j++) { if (lt_code.variable.digit[num][i][j] === 1) { var aBall = { x: x + j * 2 * (GROUP_R + 1) + (GROUP_R + 1), y: y + i * 2 * (GROUP_R + 1) + (GROUP_R + 1), g: 1.5 + Math.random(), vx: Math.pow(-1, Math.ceil(Math.random() * 1000)) * 4, vy: -5, f: 0.8, color: colors[Math.floor(Math.random() * colors.length)] }; balls.push(aBall) } } } } function upDateBalls() { for (var i = 0; i < balls.length; i++) { balls[i].x += balls[i].vx; balls[i].y += balls[i].vy; balls[i].vy += balls[i].g; if (balls[i].y >= WINDOW_HEIGHT - GROUP_R) { balls[i].y = WINDOW_HEIGHT - GROUP_R; balls[i].vy = -balls[i].vy * balls[i].f } } var effective = 0; for (var i = 0; i < balls.length; i++) { if (balls[i].x + GROUP_R > 0 && balls[i].x - GROUP_R < WINDOW_WIDTH) { balls[effective++] = balls[i] } } while (balls.length > Math.min(MAXGROUP, effective)) { balls.pop() } } function render(cxt, clock) { var now = NOWDATE; var times; var hour; var minutes; var seconds; var time; if (clock === true) { hour = now.getHours(); minutes = now.getMinutes(); seconds = now.getSeconds(); time = fullString(hour) + ":" + fullString(minutes) + ":" + fullString(seconds) } else { times = change_time(now, ENDTIME); hour = Math.floor(times / 3600); minutes = Math.floor((times % 3600) / 60); seconds = Math.floor(times % 60); time = fullString(hour) + ":" + fullString(minutes) + ":" + fullString(seconds) } time_render(time, cxt) } function fullString(num) { var str = num.toString(); if (str.length < 2) { str = "0" + str } return str } function change_time(time_now, time_end) { var seconds; seconds = time_end.getTime() - time_now.getTime(); seconds = Math.round(seconds / 1000); return seconds >= 0 ? seconds : 0 } function time_render(time, cxt) { cxt.clearRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT); var time_num = getNum(time); var hour = time_num / 10000; var minutes = (time_num % 10000) / 100; var seconds = time_num % 100; renderDigit(MARGIN_LEFT, MARGIN_TOP, parseInt(hour / 10), cxt); renderDigit(MARGIN_LEFT + 8 * 2 * (GROUP_R + 1), MARGIN_TOP, parseInt(hour % 10), cxt); renderDigit(MARGIN_LEFT + 15 * 2 * (GROUP_R + 1), MARGIN_TOP, 10, cxt); renderDigit(MARGIN_LEFT + 19 * 2 * (GROUP_R + 1), MARGIN_TOP, parseInt(minutes / 10), cxt); renderDigit(MARGIN_LEFT + 27 * 2 * (GROUP_R + 1), MARGIN_TOP, parseInt(minutes % 10), cxt); renderDigit(MARGIN_LEFT + 34 * 2 * (GROUP_R + 1), MARGIN_TOP, 10, cxt); renderDigit(MARGIN_LEFT + 38 * 2 * (GROUP_R + 1), MARGIN_TOP, parseInt(seconds / 10), cxt); renderDigit(MARGIN_LEFT + 46 * 2 * (GROUP_R + 1), MARGIN_TOP, parseInt(seconds % 10), cxt); for (var i = 0; i < balls.length; i++) { cxt.fillStyle = balls[i].color; cxt.beginPath(); cxt.arc(balls[i].x, balls[i].y, GROUP_R, 0, 2 * Math.PI, true); cxt.closePath(); cxt.fill() } } function getNum(text) { return text.replace(/[^0-9]/ig, "") } function renderDigit(x, y, num, cxt) { cxt.fillStyle = "rgb(0,102,153)"; for (var i = 0; i < lt_code.variable.digit[num].length; i++) { for (var j = 0; j < lt_code.variable.digit[num][i].length; j++) { if (lt_code.variable.digit[num][i][j] === 1) { cxt.beginPath(); cxt.arc(x + j * 2 * (GROUP_R + 1) + (GROUP_R + 1), y + i * 2 * (GROUP_R + 1) + (GROUP_R + 1), GROUP_R, 0, 2 * Math.PI); cxt.closePath(); cxt.fill() } } } } function getSeconds(time) { var times; times = time.getTime(); times = Math.floor(times / 1000); return times } }; lt_code.scrollToTop = (function smoothscroll() { var currentScroll = document.documentElement.scrollTop || document.body.scrollTop; if (currentScroll > 0) { window.requestAnimationFrame(smoothscroll); window.scrollTo(0, currentScroll - (currentScroll / 5)) } }); lt_code.inputToSpan = function (beChouseName, bottomName, fatherName, wardingName) { if (arguments.length < 3 || arguments.length > 4) { console.log("input转为span函数输入参数出错!"); return } var lt_basic_neirong = lt_code.inputToSpan.neirong; if (arguments.length === 4) { var warding_box = lt_code.getAll(wardingName) } if (!Array.isArray(lt_basic_neirong)) { lt_basic_neirong = new Array() } var lt_basic = lt_code.getClass(beChouseName); console.log(lt_basic); var lt_basic_value = new Array(); for (var i = 0; i < lt_basic.length; i++) { lt_basic_value[i] = lt_basic[i].outerHTML } var bottom_basic = lt_code.getClass(bottomName, 0); var IStext = true; var lt_for_basic = lt_code.getClass(fatherName); var lt_span = new Array(); var chack_sex = /^[\u4e00-\u9fa5]{1}/; var chack_emall = /^[^\W]+\@[^\W]+\.[^\W]{2,6}/; var chack_age = /[1][1-5][\d]|[\d][\d]|[\d]/; var chack_phone = /[\d]{17}|[\d]{15}|[\d]{11}|[\d]{8}/; bottom_basic.onmousedown = function () { buttom_chick() }; var buttom_chick = function () { if (IStext) { for (var i = 0; i < lt_for_basic.length; i++) { lt_basic_neirong[i] = !(lt_basic[0].value || lt_basic[0].innerText) ? lt_basic_neirong[i] : (lt_basic[0].value || lt_basic[0].innerText); lt_basic_neirong[i] = lt_basic_neirong[i] === "请输入内容" ? "" : lt_basic_neirong[i]; lt_basic_neirong[i] = !lt_basic_neirong[i] ? "没有内容" : lt_basic_neirong[i]; if (i === lt_code.inputToSpan.sex && lt_code.inputToSpan.sex !== 0) { if (lt_basic_neirong[i] !== "没有内容") { lt_basic_neirong[i] = chack_sex.exec(lt_basic_neirong[i]); if (!lt_basic_neirong[i]) { lt_basic_neirong[i] = "没有内容"; alert("性别一栏没有输入中文!") } else { lt_basic_neirong[i] = lt_basic_neirong[i][0]; if (!(lt_basic_neirong[i] === "男" || lt_basic_neirong[i] === "女")) { console.log(lt_basic_neirong[i]); lt_basic_neirong[i] = "没有内容"; alert("性别输入错误!") } } } } if (i === lt_code.inputToSpan.emall && lt_code.inputToSpan.emall !== 0) { if (lt_basic_neirong[i] !== "没有内容") { lt_basic_neirong[i] = chack_emall.exec(lt_basic_neirong[i]); if (!lt_basic_neirong[i]) { lt_basic_neirong[i] = "没有内容"; alert("邮箱输入出错!") } else { lt_basic_neirong[i] = lt_basic_neirong[i][0] } } } if (i === lt_code.inputToSpan.age && lt_code.inputToSpan.age !== 0) { if (lt_basic_neirong[i] !== "没有内容") { lt_basic_neirong[i] = chack_age.exec(lt_basic_neirong[i]); if (!lt_basic_neirong[i]) { lt_basic_neirong[i] = "没有内容"; alert("年龄输入出错!") } else { lt_basic_neirong[i] = lt_basic_neirong[i][0] } } } if (i === lt_code.inputToSpan.phone && lt_code.inputToSpan.phone !== 0) { if (lt_basic_neirong[i] !== "没有内容") { lt_basic_neirong[i] = lt_basic_neirong[i].replace(/[\-]|[\.]|[\_]/ig, ""); lt_basic_neirong[i] = chack_phone.exec(lt_basic_neirong[i]); if (!lt_basic_neirong[i]) { lt_basic_neirong[i] = "没有内容"; alert("电话号码输入出错!") } else { lt_basic_neirong[i] = lt_basic_neirong[i][0]; var j; var neirong = new Array(); if (lt_basic_neirong[i].length === 17) { for (j = 0; j < lt_basic_neirong[i].length; j++) { neirong[j] = lt_basic_neirong[i][j] } neirong.splice(2, 0, "-"); neirong.splice(7, 0, "-"); lt_basic_neirong[i] = neirong.join("") } else if (lt_basic_neirong[i].length === 15) { for (j = 0; j < lt_basic_neirong[i].length; j++) { neirong[j] = lt_basic_neirong[i][j] } neirong.splice(4, 0, "-"); lt_basic_neirong[i] = neirong.join("") } } } } lt_basic_value[i] = lt_basic[0].outerHTML; lt_for_basic[i].removeChild(lt_basic[0]); lt_for_basic[i].innerHTML += "<span class='get_from_basic lt_span'>" + lt_basic_neirong[i] + "</span>" } lt_for_basic = lt_code.getClass(fatherName); lt_span = lt_code.getClass("get_from_basic"); IStext = false } else { for (var i = 0; i < lt_for_basic.length; i++) { lt_span[0] ? lt_for_basic[i].removeChild(lt_span[0]) : console.log("lt_span[" + i + "]不存在"); lt_basic_value[i] = !lt_basic_value[i] ? " " : lt_basic_value[i]; lt_for_basic[i].innerHTML += lt_basic_value[i]; lt_basic[i] = lt_code.getClass("lt_basic", i); lt_basic_neirong[i] = lt_basic_neirong[i] === "没有内容" ? "" : lt_basic_neirong[i]; lt_basic_neirong[i] = !lt_basic_neirong[i] ? "请输入内容" : lt_basic_neirong[i]; lt_basic[i].setAttribute("placeholder", lt_basic_neirong[i]); lt_basic[i].innerHTML = ""; lt_basic[i].value = "" } IStext = true } lt_code.inputToSpan.neirong = lt_basic_neirong }; buttom_chick() }; lt_code.inputToSpan.neirong = null; lt_code.inputToSpan.emall = 3; lt_code.inputToSpan.sex = 1; lt_code.inputToSpan.age = 2; lt_code.inputToSpan.phone = 0; lt_code.other = {}; lt_code.other.CanvasDotsLines = function (dom) { if (arguments.length === 0) { document.body.innerHTML += "<canvas id=\"canvas\"></canvas>" } else if (arguments.length === 1) { if (typeof (dom) === "object") { dom.innerHTML += "<canvas id=\"canvas\"></canvas>" } else { if (this.getTage("canvas").length === 0) { console.log("otherCanvasDotsLines函数并没有找到已经提供的canvas画布!"); return } } } else { console.log("otherCanvasDotsLines函数参数输入错误!"); return } var Dots = function (speed, alpha) { this.canvas; this.ctx; this.x; this.y; this.r; this.a = alpha && alpha > 0 && alpha <= 1 ? alpha : .8; this.speed = speed && speed > 0 ? speed : 2; this.sx; this.sy; this.isMouseDot = 0 }; Dots.prototype = { init: function (canvas, x, y, isMouseDot) { this.canvas = canvas; this.ctx = this.canvas.getContext('2d'); this.x = x * 2 || Math.random() * this.canvas.width; this.y = y * 2 || Math.random() * this.canvas.height; this.r = Math.random() * 6; if (isMouseDot) this.isMouseDot = 1; this.sx = isMouseDot ? 0 : Math.random() * this.speed * 2 - this.speed; this.sy = isMouseDot ? 0 : Math.random() * this.speed * 2 - this.speed; this.ctx.beginPath(); this.ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI); this.ctx.fillStyle = 'rgba(255,255,255,' + this.a + ')'; this.ctx.fill(); this.ctx.closePath() }, update: function () { if (this.isMouseDot) return; this.x = this.x + this.sx; this.y = this.y + this.sy; if (this.x < 0 || this.x > this.canvas.width) { this.init(this.canvas) } if (this.y < 0 || this.y > this.canvas.height) { this.init(this.canvas) } this.ctx.beginPath(); this.ctx.arc(this.x, this.y, this.r + 0.5, 0, 2 * Math.PI); this.ctx.fillStyle = 'rgba(255,255,255,' + this.a + ')'; this.ctx.fill(); this.ctx.closePath() }, mouseDot: function (x, y) { this.x = x * 2; this.y = y * 2; this.ctx.beginPath(); this.ctx.arc(this.x, this.y, this.r + 0.5, 0, 2 * Math.PI); this.ctx.fillStyle = 'rgba(255,255,255,' + this.a + ')'; this.ctx.fill(); this.ctx.closePath() } }; function Wonder(opts) { var part = document.querySelector(opts.el), canvas = document.createElement('canvas'), ctx = canvas.getContext('2d'), partStyle = window.getComputedStyle(part, null), width = parseInt(partStyle.width), height = parseInt(partStyle.height), area = width * height, cssText = 'width: ' + width + 'px; height: ' + height + 'px;'; canvas.setAttribute('style', cssText); canvas.width = (width * 2).toString(); canvas.height = (height * 2).toString(); part.appendChild(canvas); var dotsArr = [], dotsNum = opts.dotsNumber || parseInt(area / 10000), maxDotsNum = dotsNum * 2, overNum = 0, dotsDistance = opts.lineMaxLength || 250; for (var i = 0; i < dotsNum; i++) { var dot = new Dots(opts.speed, opts.dotsAlpha); if (i < dotsNum - 1) { dot.init(canvas) } else { dot.init(canvas, 0, 0, 1) } dotsArr.push(dot) } var clickWithNew = opts.clickWithDotsNumber || 5; document.addEventListener('click', createDot); function createDot(e) { var tx = e.pageX, ty = e.pageY; if ((tx > 0 && tx < width) && (ty > 0 && ty < height)) { for (var i = 0; i < clickWithNew; i++) { var dot = new Dots(opts.speed, opts.dotsAlpha); dotsArr.push(dot); dotsNum += 1; dot.init(canvas, tx, ty) } } } var mouseDot, mouseDotIndex; canvas.addEventListener('mouseenter', mouseDotEnter); canvas.addEventListener('mousemove', mouseDotMove); canvas.addEventListener('mouseleave', mouseDotLeave); function mouseDotEnter(e) { var tx = e.pageX, ty = e.pageY; dot.init(canvas, tx, ty, 1) } function mouseDotMove(e) { var tx = e.pageX, ty = e.pageY; if ((tx > 0 && tx < width) && (ty > 0 && ty < height)) { dot.mouseDot(tx, ty) } } function mouseDotLeave(e) { dot.init(canvas) } var requestAnimFrame = requestAnimationFrame || webkitRequestAnimationFrame || oRequestAnimationFrame || msRequestAnimationFrame; requestAnimFrame(animateUpdate); function animateUpdate() { ctx.clearRect(0, 0, canvas.width, canvas.height); if (dotsNum > maxDotsNum) { overNum = dotsNum - maxDotsNum } for (var i = overNum; i < dotsNum; i++) { if (dotsArr[i]) dotsArr[i].update() } for (var i = overNum; i < dotsNum; i++) { for (var j = i + 1; j < dotsNum; j++) { var tx = dotsArr[i].x - dotsArr[j].x, ty = dotsArr[i].y - dotsArr[j].y, s = Math.sqrt(Math.pow(tx, 2) + Math.pow(ty, 2)); if (s < dotsDistance) { ctx.beginPath(); ctx.moveTo(dotsArr[i].x, dotsArr[i].y); ctx.lineTo(dotsArr[j].x, dotsArr[j].y); ctx.strokeStyle = 'rgba(255,255,255,' + (dotsDistance - s) / dotsDistance + ')'; ctx.strokeWidth = 1; ctx.stroke(); ctx.closePath() } } } requestAnimFrame(animateUpdate) } } var Main = function () { var dotsArr = [], dotsNum = 0, maxDotsNum = 0, overNum = 0, dotsDistance = 250, canvas = document.getElementById('canvas'), ctx = canvas.getContext('2d'), width = parseInt(document.documentElement.clientWidth), height = parseInt(window.screen.availHeight), area = width * height, cssText = 'width: ' + width + 'px; height: ' + height + 'px;position:absolute;z-index:-1;top:0;left:0'; canvas.setAttribute('style', cssText); canvas.width = (width * 2).toString(); canvas.height = (height * 2).toString(); dotsNum = parseInt(area / 6000); maxDotsNum = dotsNum * 2; for (var i = 0; i < dotsNum; i++) { var dot = new Dots(); dotsArr.push(dot); dot.init(canvas) } document.addEventListener('click', createDot); function createDot(e) { var tx = e.pageX, ty = e.pageY; if ((tx > 0 && tx < width) && (ty > 0 && ty < height)) { for (var i = 0; i < 5; i++) { var dot = new Dots(); dotsArr.push(dot); dotsNum += 1; dot.init(canvas, tx, ty) } } }; document.addEventListener('mousemove', moveDot); function moveDot(e) { var tx = e.pageX, ty = e.pageY; if ((tx > 0 && tx < width) && (ty > 0 && ty < height)) { dot.mouseDot(tx, ty) } }; var requestAnimFrame = requestAnimationFrame || webkitRequestAnimationFrame || oRequestAnimationFrame || msRequestAnimationFrame; requestAnimFrame(animateUpdate); function animateUpdate() { ctx.clearRect(0, 0, canvas.width, canvas.height); if (dotsNum > maxDotsNum) { overNum = dotsNum - maxDotsNum } for (var i = overNum; i < dotsNum; i++) { dotsArr[i].update() } for (var i = overNum; i < dotsNum; i++) { for (var j = i + 1; j < dotsNum; j++) { var tx = dotsArr[i].x - dotsArr[j].x, ty = dotsArr[i].y - dotsArr[j].y, s = Math.sqrt(Math.pow(tx, 2) + Math.pow(ty, 2)); if (s < dotsDistance) { ctx.beginPath(); ctx.moveTo(dotsArr[i].x, dotsArr[i].y); ctx.lineTo(dotsArr[j].x, dotsArr[j].y); ctx.strokeStyle = 'rgba(255,255,255,' + (dotsDistance - s) / dotsDistance + ')'; ctx.strokeWidth = 1; ctx.stroke(); ctx.closePath() } } } requestAnimFrame(animateUpdate) } }() }; lt_code.other.CanvasBall = function (dom) { if (arguments.length === 0) { if (document.body.getElementsByTagName("canvas").length < 1) { document.body.innerHTML += "<canvas id=\"cas\"></canvas>"; document.body.innerHTML += "<div id=\"stop_button\"></div>" } } else if (arguments.length === 1) { if (typeof (dom) === "object") { if (lt_code.getTage("canvas", dom).length < 1) { dom.innerHTML += "<canvas id=\"cas\"></canvas>"; dom.innerHTML += "<div id=\"stop_button\"></div>" } } else { if (this.getTage("canvas").length === 0) { console.log("otherCanvasDotsLines函数并没有找到已经提供的canvas画布!"); return } } } else { console.log("otherCanvasDotsLines函数参数输入错误!"); return } var canvas = document.getElementById("cas"), ctx = canvas.getContext("2d"), vpx = canvas.width / 2, vpy = canvas.height / 2, Radius = 150, balls = [], angleX = Math.PI / 100, angleY = Math.PI / 100, button = lt_code.getId("stop_button"); window.addEventListener("mousemove", function (event) { var x = event.clientX - canvas.offsetLeft - vpx - document.body.scrollLeft - document.documentElement.scrollLeft; var y = event.clientY - canvas.offsetTop - vpy - document.body.scrollTop - document.documentElement.scrollTop; angleY = -x * 0.0001; angleX = -y * 0.0001 }); var Animation = function () { this.init() }; Animation.prototype = { isrunning: false, init: function () { balls = []; var num = 500; for (var i = 0; i <= num; i++) { var k = -1 + (2 * (i + 1) - 1) / num; var a = Math.acos(k); var b = a * Math.sqrt(num * Math.PI); var x = Radius * Math.sin(a) * Math.cos(b); var y = Radius * Math.sin(a) * Math.sin(b); var z = Radius * Math.cos(a); var b = new ball(x, y, z, 1.5); balls.push(b); b.paint() } }, start: function () { this.isrunning = true; animate() }, stop: function () { this.isrunning = false } }; function animate() { ctx.clearRect(0, 0, canvas.width, canvas.height); rotateX(); rotateY(); balls.sort(function (a, b) { return b.z - a.z }); for (var i = 0; i < balls.length; i++) { balls[i].paint() } if (animation.isrunning) { if ("requestAnimationFrame" in window) { requestAnimationFrame(animate) } else if ("webkitRequestAnimationFrame" in window) { webkitRequestAnimationFrame(animate) } else if ("msRequestAnimationFrame" in window) { msRequestAnimationFrame(animate) } else if ("mozRequestAnimationFrame" in window) { mozRequestAnimationFrame(animate) } } } function rotateX() { var cos = Math.cos(angleX); var sin = Math.sin(angleX); for (var i = 0; i < balls.length; i++) { var y1 = balls[i].y * cos - balls[i].z * sin; var z1 = balls[i].z * cos + balls[i].y * sin; balls[i].y = y1; balls[i].z = z1 } } function rotateY() { var cos = Math.cos(angleY); var sin = Math.sin(angleY); for (var i = 0; i < balls.length; i++) { var x1 = balls[i].x * cos - balls[i].z * sin; var z1 = balls[i].z * cos + balls[i].x * sin; balls[i].x = x1; balls[i].z = z1 } } var ball = function (x, y, z, r) { this.x = x; this.y = y; this.z = z; this.r = r; this.width = 2 * r }; ball.prototype = { paint: function () { var fl = 450; ctx.save(); ctx.beginPath(); var scale = fl / (fl - this.z); var alpha = (this.z + Radius) / (2 * Radius); ctx.arc(vpx + this.x, vpy + this.y, this.r * scale, 0, 2 * Math.PI, true); ctx.fillStyle = "rgba(255,255,255," + (alpha + 0.5) + ")"; ctx.fill(); ctx.restore() } }; var animation = new Animation(); animation.start(); if (!!button) { button.onclick = function () { this.innerText === "开始" ? this.innerText = "停止" : this.innerText = "开始"; this.innerText === "开始" ? animation.stop() : animation.start(); } } }; lt_code.other.PBoids = function (dom_father) { if (arguments.length === 0) { document.body.style.overflow = "hidden"; dom_father.innerHTML += "<canvas></canvas>"; document.body.innerHTML += "<p id=\"pbods\">Click near Boids to disperse group.</p>" } else { dom_father.style.overflow = "hidden"; dom_father.innerHTML += "<canvas></canvas>"; dom_father.innerHTML += "<p id=\"pbods\">Click near Boids to disperse group.</p>" } document.head.innerHTML += "<style>#pbods{position: absolute;  bottom: 1em;  width: 100%;  color: rgba(255, 255, 255, 0.25);  text-align: center; pointer-events: none;  transition: opacity 1s ease-in-out;}canvas{z-index:-1}</style>"; simulate('2d', { init: function () { this.spray(150, function () { return [null, null, Vector.create(this.width * Math.random(), this.height * Math.random()), Vector.random(1), .75 + (Math.random() * .5), 100 * Math.random(), [this.behavior.cohesion(), this.behavior.alignment(), this.behavior.separation(), this.behavior.limit(1 + Math.random()), this.behavior.wrap(5), this.behavior.move()]] }) }, tick: function () { }, beforePaint: function () { this.clear() }, paint: function (particle) { var p = particle.position; var v = particle.velocity; var s = particle.stimulated || 0; var l = particle.life; this.paint.circle(p.x, p.y, v.magnitudeSquared, 'hsla(' + v.angle + ',100%,50%,1)') }, afterPaint: function () { }, action: function (x, y) { this.particles.forEach(function (p) { if (Vector.distanceSquared(p.position, { x: x, y: y }) < 4000) { p.velocity.randomize(100); p.position.x += p.velocity.x; p.position.y += p.velocity.y } }) } }); setTimeout(() => { document.querySelector('p').style.opacity = 0 }, 3000); PI_2 = Math.PI / 2; PI_180 = Math.PI / 180; var Random = { between: function (min, max) { return min + (Math.random() * (max - min)) } }; function Vector(x, y) { this._x = x || 0; this._y = y || 0 } Vector.create = function (x, y) { return new Vector(x, y) }; Vector.add = function (a, b) { return new Vector(a.x + b.x, a.y + b.y) }; Vector.subtract = function (a, b) { return new Vector(a.x - b.x, a.y - b.y) }; Vector.random = function (range) { var v = new Vector(); v.randomize(range); return v }; Vector.distanceSquared = function (a, b) { var dx = a.x - b.x; var dy = a.y - b.y; return dx * dx + dy * dy }; Vector.distance = function (a, b) { var dx = a.x - b.x; var dy = a.y - b.y; return Math.sqrt(dx * dx + dy * dy) }; Vector.prototype = { get x() { return this._x }, get y() { return this._y }, set x(value) { this._x = value }, set y(value) { this._y = value }, get magnitudeSquared() { return this._x * this._x + this._y * this._y }, get magnitude() { return Math.sqrt(this.magnitudeSquared) }, get angle() { return Math.atan2(this._y, this._x) * 180 / Math.PI }, clone: function () { return new Vector(this._x, this._y) }, add: function (v) { this._x += v.x; this._y += v.y }, subtract: function (v) { this._x -= v.x; this._y -= v.y }, multiply: function (value) { this._x *= value; this._y *= value }, divide: function (value) { this._x /= value; this._y /= value }, normalize: function () { var magnitude = this.magnitude; if (magnitude > 0) { this.divide(magnitude) } }, limit: function (treshold) { if (this.magnitude > treshold) { this.normalize(); this.multiply(treshold) } }, randomize: function (amount) { amount = amount || 1; this._x = amount * 2 * (-.5 + Math.random()); this._y = amount * 2 * (-.5 + Math.random()) }, rotate: function (degrees) { var magnitude = this.magnitude; var angle = ((Math.atan2(this._x, this._y) * PI_HALF) + degrees) * PI_180; this._x = magnitude * Math.cos(angle); this._y = magnitude * Math.sin(angle) }, flip: function () { var temp = this._y; this._y = this._x; this._x = temp }, invert: function () { this._x = -this._x; this._y = -this._y }, toString: function () { return this._x + ', ' + this._y } }; function Particle(id, group, position, velocity, size, life, behavior) { this._id = id || 'default'; this._group = group || 'default'; this._position = position || new Vector(); this._velocity = velocity || new Vector(); this._size = size || 1; this._life = Math.round(life || 0); this._behavior = behavior || [] } Particle.prototype = { get id() { return this._id }, get group() { return this._group }, get life() { return this._life }, get size() { return this._size }, set size(size) { this._size = size }, get position() { return this._position }, get velocity() { return this._velocity }, update: function (stage) { this._life++; var i = 0; var l = this._behavior.length; for (; i < l; i++) { this._behavior[i].call(stage, this) } }, toString: function () { return 'Particle(' + this._id + ') ' + this._life + ' pos: ' + this._position + ' vec: ' + this._velocity } }; function simulate(dimensions, options) { var particles = []; var destroyed = []; var update = update || function () { }; var stage = stage || function () { }; var canvas; var context; if (!options) { console.error('"options" object must be defined'); return } if (!options.init) { console.error('"init" function must be defined'); return } if (!options.paint) { console.error('"paint" function must be defined'); return } if (!options.tick) { options.tick = function () { } } if (!options.beforePaint) { options.beforePaint = function () { } } if (!options.afterPaint) { options.afterPaint = function () { } } if (!options.action) { options.action = function () { } } if (document.readyState === 'interactive') { setup() } else { document.addEventListener('DOMContentLoaded', setup) } function fitCanvas() { canvas.width = document.body.clientWidth; canvas.height = document.body.clientHeight } function setup() { canvas = lt_code.getTage('canvas', dom_father, 0); window.addEventListener('resize', fitCanvas); go() } function go() { fitCanvas(); context = canvas.getContext(dimensions); function act() { var i = 0; var l = particles.length; var p; for (; i < l; i++) { particles[i].update(this) } while (p = destroyed.pop()) { do { if (p !== particles[i]) { continue } particles.splice(i, 1) } while (i-- >= 0) } options.beforePaint.call(this); i = 0; l = particles.length; for (; i < l; i++) { options.paint.call(this, particles[i]) } options.afterPaint.call(this) } function tick() { options.tick.call(this); act(); window.requestAnimationFrame(tick) } function clear() { context.clearRect(0, 0, canvas.width, canvas.height) } function destroy(particle) { destroyed.push(particle) } function add(id, group, position, velocity, size, life, behavior) { particles.push(new Particle(id, group, position, velocity, size, life, behavior)) } function spray(amount, config) { var i = 0; for (; i < amount; i++) { add.apply(this, config()) } } function debug(particle) { this.paint.circle(particle.position.x, particle.position.y, particle.size, 'rgba(255,0,0,.75)'); context.beginPath(); context.moveTo(particle.position.x, particle.position.y); context.lineTo(particle.position.x + (particle.velocity.x * 10), particle.position.y + (particle.velocity.y * 10)); context.strokeStyle = 'rgba(255,0,0,.1)'; context.stroke(); context.closePath() } this.clear = clear; this.destroy = destroy; this.add = add; this.spray = spray; this.debug = debug; this.paint = { circle: function (x, y, size, color) { context.beginPath(); context.arc(x, y, size, 0, 2 * Math.PI, false); context.fillStyle = color; context.fill() }, square: function (x, y, size, color) { context.beginPath(); context.rect(x - (size * .5), y - (size * .5), size, size); context.fillStyle = color; context.fill() } }; this.behavior = { cohesion: function (range, speed) { range = Math.pow(range || 100, 2); speed = speed || .001; return function (particle) { var center = new Vector(); var i = 0; var l = particles.length; var count = 0; if (l <= 1) { return } for (; i < l; i++) { if (particles[i] === particle || Vector.distanceSquared(particles[i].position, particle.position) > range) { continue } center.add(Vector.subtract(particles[i].position, particle.position)); count++ } if (count > 0) { center.divide(count); center.normalize(); center.multiply(particle.velocity.magnitude); center.multiply(.05) } particle.velocity.add(center) } }, separation: function (distance) { distance = Math.pow(distance || 25, 2); return function (particle) { var heading = new Vector(); var i = 0; var l = particles.length; var count = 0; var diff; if (l <= 1) { return } for (; i < l; i++) { if (particles[i] === particle || Vector.distanceSquared(particles[i].position, particle.position) > distance) { continue } diff = Vector.subtract(particle.position, particles[i].position); diff.normalize(); heading.add(diff); count++ } if (count > 0) { heading.divide(count); heading.normalize(); heading.multiply(particle.velocity.magnitude); heading.limit(.1) } particle.velocity.add(heading) } }, alignment: function (range) { range = Math.pow(range || 100, 2); return function (particle) { var i = 0; var l = particles.length; var count = 0; var heading = new Vector(); if (l <= 1) { return } for (; i < l; i++) { if (particles[i] === particle || Vector.distanceSquared(particles[i].position, particle.position) > range) { continue } heading.add(particles[i].velocity); count++ } if (count > 0) { heading.divide(count); heading.normalize(); heading.multiply(particle.velocity.magnitude); heading.multiply(.1) } particle.velocity.add(heading) } }, move: function () { return function (particle) { particle.position.add(particle.velocity) } }, eat: function (food) { food = food || []; return function (particle) { var i = 0; var l = particles.length; var prey; for (; i < l; i++) { prey = particles[i]; if (prey === particle || food.indexOf(prey.group) === -1) { continue } if (Vector.distanceSquared(particle.position, neighbour.position) < 2 && particle.size >= neighbour.size) { particle.size += neighbour.size; destroy(neighbour) } } } }, force: function (x, y) { return function (particle) { particle.velocity.x += x; particle.velocity.y += y } }, limit: function (treshold) { return function (particle) { particle.velocity.limit(treshold) } }, attract: function (forceMultiplier, groups) { forceMultiplier = forceMultiplier || 1; groups = groups || []; return function (particle) { var totalForce = new Vector(0, 0); var force = new Vector(0, 0); var i = 0; var l = particles.length; var distance; var pull; var attractor; var grouping = groups.length; for (; i < l; i++) { attractor = particles[i]; if (attractor === particle || (grouping && groups.indexOf(attractor.group) === -1)) { continue } force.x = attractor.position.x - particle.position.x; force.y = attractor.position.y - particle.position.y; distance = force.magnitude; force.normalize(); force.multiply(attractor.size / distance); totalForce.add(force) } totalForce.multiply(forceMultiplier); particle.velocity.add(totalForce) } }, wrap: function (margin) { return function (particle) { var position = particle.position; var radius = particle.size * .5; if (position.x + radius > canvas.width + margin) { position.x = radius } if (position.y + radius > canvas.height + margin) { position.y = radius } if (position.x - radius < -margin) { position.x = canvas.width - radius } if (position.y - radius < -margin) { position.y = canvas.height - radius } } }, reflect: function (particle) { return function () { var position = particle.position; var velocity = particle.velocity; var radius = particle.size * .5; if (position.x + radius > canvas.width) { velocity.x = -velocity.x } if (position.y + radius > canvas.height) { velocity.y = -velocity.y } if (position.x - radius < 0) { velocity.x = -velocity.x } if (position.y - radius < 0) { velocity.y = -velocity.y } } }, edge: function (action) { return function (particle) { var position = particle.position; var velocity = particle.velocity; var radius = particle.size * .5; if (position.x + radius > canvas.width) { action(particle) } if (position.y + radius > canvas.height) { action(particle) } if (position.x - radius < 0) { action(particle) } if (position.y - radius < 0) { action(particle) } } } }; Object.defineProperties(this, { 'particles': { get: function () { return particles } }, 'width': { get: function () { return canvas.width } }, 'height': { get: function () { return canvas.height } }, 'context': { get: function () { return context } } }); options.init.call(this); tick(); var self = this; document.addEventListener('click', function (e) { options.action.call(self, e.pageX, e.pageY) }) } } }; lt_code.other.fireText = function (dom_father, text) { if (arguments.length === 0) { document.body.innerHTML += "<div id=\"canvasContainer\"></div>" } else if (arguments.length === 1) { dom_father.innerHTML += '<div id="canvasContainer"></div>' } else if (arguments.length === 2) { dom_father.innerHTML += '<div id="canvasContainer"></div>'; changeText2() } else { console.log("fireText函数参数输入错误!"); return } if (arguments.length === 0) { document.head.innerHTML += "<style>#canvasContainer{margin: 0px;width: 100 %;height: 100 %;}</style>" } function bargs(_fn) { var args = []; for (var n = 1; n < arguments.length; n++)args.push(arguments[n]); return function () { return _fn.apply(this, args) } } (function (window) { var Sakri = window.Sakri || {}; window.Sakri = window.Sakri || Sakri; Sakri.MathUtil = {}; Sakri.MathUtil.normalize = function (value, minimum, maximum) { return (value - minimum) / (maximum - minimum) }; Sakri.MathUtil.interpolate = function (normValue, minimum, maximum) { return minimum + (maximum - minimum) * normValue }; Sakri.MathUtil.map = function (value, min1, max1, min2, max2) { return Sakri.MathUtil.interpolate(Sakri.MathUtil.normalize(value, min1, max1), min2, max2) }; Sakri.MathUtil.hexToRgb = function (hex) { var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i; hex = hex.replace(shorthandRegex, function (m, r, g, b) { return r + r + g + g + b + b }); var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex); return result ? { r: parseInt(result[1], 16), g: parseInt(result[2], 16), b: parseInt(result[3], 16) } : null }; Sakri.MathUtil.getRandomNumberInRange = function (min, max) { return min + Math.random() * (max - min) }; Sakri.MathUtil.getRandomIntegerInRange = function (min, max) { return Math.round(Sakri.MathUtil.getRandomNumberInRange(min, max)) } }(window)); (function (window) { var Sakri = window.Sakri || {}; window.Sakri = window.Sakri || Sakri; Sakri.Geom = {}; Sakri.Geom.Point = function (x, y) { this.x = isNaN(x) ? 0 : x; this.y = isNaN(y) ? 0 : y }; Sakri.Geom.Point.prototype.clone = function () { return new Sakri.Geom.Point(this.x, this.y) }; Sakri.Geom.Point.prototype.update = function (x, y) { this.x = isNaN(x) ? this.x : x; this.y = isNaN(y) ? this.y : y }; Sakri.Geom.Rectangle = function (x, y, width, height) { this.update(x, y, width, height) }; Sakri.Geom.Rectangle.prototype.update = function (x, y, width, height) { this.x = isNaN(x) ? 0 : x; this.y = isNaN(y) ? 0 : y; this.width = isNaN(width) ? 0 : width; this.height = isNaN(height) ? 0 : height }; Sakri.Geom.Rectangle.prototype.getRight = function () { return this.x + this.width }; Sakri.Geom.Rectangle.prototype.getBottom = function () { return this.y + this.height }; Sakri.Geom.Rectangle.prototype.getCenter = function () { return new Sakri.Geom.Point(this.getCenterX(), this.getCenterY()) }; Sakri.Geom.Rectangle.prototype.getCenterX = function () { return this.x + this.width / 2 }; Sakri.Geom.Rectangle.prototype.getCenterY = function () { return this.y + this.height / 2 }; Sakri.Geom.Rectangle.prototype.containsPoint = function (x, y) { return x >= this.x && y >= this.y && x <= this.getRight() && y <= this.getBottom() }; Sakri.Geom.Rectangle.prototype.clone = function () { return new Sakri.Geom.Rectangle(this.x, this.y, this.width, this.height) }; Sakri.Geom.Rectangle.prototype.toString = function () { return "Rectangle{x:" + this.x + " , y:" + this.y + " , width:" + this.width + " , height:" + this.height + "}" } }(window)); (function (window) { var Sakri = window.Sakri || {}; window.Sakri = window.Sakri || Sakri; Sakri.CanvasTextUtil = {}; Sakri.CanvasTextUtil.getFontSizeForWidth = function (string, fontProps, width, canvas, fillStyle, maxFontSize) { if (!canvas) { canvas = document.createElement("canvas") } if (!fillStyle) { fillStyle = "#000000" } if (isNaN(maxFontSize)) { maxFontSize = 500 } var context = canvas.getContext('2d'); context.font = fontProps.getFontString(); context.textBaseline = "top"; var copy = fontProps.clone(); context.font = copy.getFontString(); var textWidth = context.measureText(string).width; if (textWidth < width) { while (context.measureText(string).width < width) { copy.fontSize++; context.font = copy.getFontString(); if (copy.fontSize > maxFontSize) { console.log("getFontSizeForWidth() max fontsize reached"); return null } } } else if (textWidth > width) { while (context.measureText(string).width > width) { copy.fontSize--; context.font = copy.getFontString(); if (copy.fontSize < 0) { console.log("getFontSizeForWidth() min fontsize reached"); return null } } } return copy.fontSize }; Sakri.CanvasTextProperties = function (fontWeight, fontStyle, fontSize, fontFace) { this.setFontWeight(fontWeight); this.setFontStyle(fontStyle); this.setFontSize(fontSize); this.fontFace = fontFace ? fontFace : "sans-serif" }; Sakri.CanvasTextProperties.NORMAL = "normal"; Sakri.CanvasTextProperties.BOLD = "bold"; Sakri.CanvasTextProperties.BOLDER = "bolder"; Sakri.CanvasTextProperties.LIGHTER = "lighter"; Sakri.CanvasTextProperties.ITALIC = "italic"; Sakri.CanvasTextProperties.OBLIQUE = "oblique"; Sakri.CanvasTextProperties.prototype.setFontWeight = function (fontWeight) { switch (fontWeight) { case Sakri.CanvasTextProperties.NORMAL: case Sakri.CanvasTextProperties.BOLD: case Sakri.CanvasTextProperties.BOLDER: case Sakri.CanvasTextProperties.LIGHTER: this.fontWeight = fontWeight; break; default: this.fontWeight = Sakri.CanvasTextProperties.NORMAL } }; Sakri.CanvasTextProperties.prototype.setFontStyle = function (fontStyle) { switch (fontStyle) { case Sakri.CanvasTextProperties.NORMAL: case Sakri.CanvasTextProperties.ITALIC: case Sakri.CanvasTextProperties.OBLIQUE: this.fontStyle = fontStyle; break; default: this.fontStyle = Sakri.CanvasTextProperties.NORMAL } }; Sakri.CanvasTextProperties.prototype.setFontSize = function (fontSize) { if (fontSize && fontSize.indexOf && fontSize.indexOf("px") > -1) { var size = fontSize.split("px")[0]; fontProperites.fontSize = isNaN(size) ? 24 : size; return } this.fontSize = isNaN(fontSize) ? 24 : fontSize }; Sakri.CanvasTextProperties.prototype.clone = function () { return new Sakri.CanvasTextProperties(this.fontWeight, this.fontStyle, this.fontSize, this.fontFace) }; Sakri.CanvasTextProperties.prototype.getFontString = function () { return this.fontWeight + " " + this.fontStyle + " " + this.fontSize + "px " + this.fontFace } }(window)); window.requestAnimationFrame = window.__requestAnimationFrame || window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || (function () { return function (callback, element) { var lastTime = element.__lastTime; if (lastTime === undefined) { lastTime = 0 } var currTime = Date.now(); var timeToCall = Math.max(1, 33 - (currTime - lastTime)); window.setTimeout(callback, timeToCall); element.__lastTime = currTime + timeToCall } })(); var readyStateCheckInterval = setInterval(function () { if (document.readyState === "complete") { clearInterval(readyStateCheckInterval); init() } }, 10); var canvas; var context; var canvasContainer; var htmlBounds; var bounds; var minimumStageWidth = 250; var minimumStageHeight = 250; var maxStageWidth = 1000; var maxStageHeight = 600; var resizeTimeoutId = -1; var stats; function init() { canvasContainer = document.getElementById("canvasContainer"); window.onresize = resizeHandler; commitResize() } function getWidth(element) { return Math.max(element.scrollWidth, element.offsetWidth, element.clientWidth) } function getHeight(element) { return Math.max(element.scrollHeight, element.offsetHeight, element.clientHeight) } function resizeHandler() { context.clearRect(0, 0, canvas.width, canvas.height); clearTimeout(resizeTimeoutId); clearTimeoutsAndIntervals(); resizeTimeoutId = setTimeout(commitResize, 300) } function commitResize() { if (canvas) { canvasContainer.removeChild(canvas) } canvas = document.createElement('canvas'); canvas.style.position = "absolute"; context = canvas.getContext("2d"); canvasContainer.appendChild(canvas); htmlBounds = new Sakri.Geom.Rectangle(0, 0, getWidth(canvasContainer), getHeight(canvasContainer)); if (htmlBounds.width >= maxStageWidth) { canvas.width = maxStageWidth; canvas.style.left = htmlBounds.getCenterX() - (maxStageWidth / 2) + "px" } else { canvas.width = htmlBounds.width; canvas.style.left = "0px" } if (htmlBounds.height > maxStageHeight) { canvas.height = maxStageHeight; canvas.style.top = htmlBounds.getCenterY() - (maxStageHeight / 2) + "px" } else { canvas.height = htmlBounds.height; canvas.style.top = "0px" } bounds = new Sakri.Geom.Rectangle(0, 0, canvas.width, canvas.height); context.clearRect(0, 0, canvas.width, canvas.height); if (bounds.width < minimumStageWidth || bounds.height < minimumStageHeight) { stageTooSmallHandler(); return } var textInputSpan = document.getElementById("textInputSpan"); textInputSpan.style.top = htmlBounds.getCenterY() + (bounds.height / 2) + 20 + "px"; textInputSpan.style.left = (htmlBounds.getCenterX() - getWidth(textInputSpan) / 2) + "px"; startDemo() } function stageTooSmallHandler() { var warning = "Sorry, bigger screen required :("; context.font = "bold normal 24px sans-serif"; context.fillText(warning, bounds.getCenterX() - context.measureText(warning).width / 2, bounds.getCenterY() - 12) } var animating = false; var particles = []; var numParticles = 4000; var currentText = "SAKRI"; var fontRect; var fontProperties = new Sakri.CanvasTextProperties(Sakri.CanvasTextProperties.BOLD, null, 100); var animator; var particleSource = new Sakri.Geom.Point(); var particleSourceStart = new Sakri.Geom.Point(); var particleSourceTarget = new Sakri.Geom.Point(); var redParticles = ["#fe7a51", "#fdd039", "#fd3141"]; var greenParticles = ["#dbffa6", "#fcf8fd", "#99de5e"]; var pinkParticles = ["#fef4f7", "#f2a0c0", "#fb3c78"]; var yellowParticles = ["#fdfbd5", "#fff124", "#f4990e"]; var blueParticles = ["#9ca2df", "#222a6d", "#333b8d"]; var particleColorSets = [redParticles, greenParticles, pinkParticles, yellowParticles, blueParticles]; var particleColorIndex = 0; var renderParticleFunction; var renderBounds; var particleCountOptions = [2000, 4000, 6000, 8000, 10000, 15000, 20000]; var pixelParticleCountOptions = [10000, 40000, 60000, 80000, 100000, 150000]; function clearTimeoutsAndIntervals() { animating = false } function startDemo() { fontRect = new Sakri.Geom.Rectangle(Math.floor(bounds.x + bounds.width * .2), 0, Math.floor(bounds.width - bounds.width * .4), bounds.height); fontProperties.fontSize = 100; fontProperties.fontSize = Sakri.CanvasTextUtil.getFontSizeForWidth(currentText, fontProperties, fontRect.width, canvas); fontRect.y = Math.floor(bounds.getCenterY() - fontProperties.fontSize / 2); fontRect.height = fontProperties.fontSize; renderBounds = fontRect.clone(); renderBounds.x -= Math.floor(canvas.width * .1); renderBounds.width += Math.floor(canvas.width * .2); renderBounds.y -= Math.floor(fontProperties.fontSize * .5); renderBounds.height += Math.floor(fontProperties.fontSize * .6); context.font = fontProperties.getFontString(); createParticles(); context.globalAlpha = globalAlpha; animating = true; loop() } function loop() { if (!animating) { return } stats.tick(); renderParticles(); window.requestAnimationFrame(loop, canvas) } function createParticles() { context.clearRect(0, 0, canvas.width, canvas.height); context.fillText(currentText, fontRect.x, fontRect.y); var imageData = context.getImageData(fontRect.x, fontRect.y, fontRect.width, fontRect.height); var data = imageData.data; var length = data.length; var rowWidth = fontRect.width * 4; var i, y, x; particles = []; for (i = 0; i < length; i += 4) { if (data[i + 3] > 0) { y = Math.floor(i / rowWidth); x = fontRect.x + (i - y * rowWidth) / 4; particles.push(x); particles.push(fontRect.y + y); particles.push(x); particles.push(fontRect.y + y) } } context.clearRect(0, 0, canvas.width, canvas.height); xDirections = []; yDirections = []; for (i = 0; i < directionCount; i++) { xDirections[i] = -7 + Math.random() * 14; yDirections[i] = Math.random() * -5 } } var xDirections, yDirections; var globalAlpha = .11; var xWind = 0; var threshold = 60; var amountRed = 25; var amountGreen = 12; var amountBlue = 1; var directionCount = 100; function renderParticles() { context.fillStyle = "#000000"; context.fillRect(renderBounds.x, renderBounds.y, renderBounds.width, renderBounds.height); context.fillStyle = "#010000"; context.fillText(currentText, fontRect.x, fontRect.y); var randomRed = amountRed - 5 + Math.random() * 10; var randomGreen = amountGreen - 2 + Math.random() * 4; var imageData = context.getImageData(renderBounds.x, renderBounds.y, renderBounds.width, renderBounds.height); var data = imageData.data; var rowWidth = imageData.width * 4; var index, i, length = particles.length; var d = Math.floor(Math.random() * 30); xWind += (-.5 + Math.random()); xWind = Math.min(xWind, 1.5); xWind = Math.max(xWind, -1.5); for (i = 0; i < length; i += 4, d++) { particles[i] += (xDirections[d % directionCount] + xWind); particles[i + 1] += yDirections[d % directionCount]; index = Math.round(particles[i] - renderBounds.x) * 4 + Math.round(particles[i + 1] - renderBounds.y) * rowWidth; data[index] += randomRed; data[index + 1] += randomGreen; data[index + 2] += amountBlue; if (data[index] < threshold) { particles[i] = particles[i + 2]; particles[i + 1] = particles[i + 3] } } context.putImageData(imageData, renderBounds.x, renderBounds.y) } var maxCharacters = 10; function changeText() { var textInput = document.getElementById("textInput"); if (textInput.value && textInput.text !== "") { if (textInput.value.length > maxCharacters) { alert("Sorry, there is only room for " + maxCharacters + " characters. Try a shorter name."); return } if (textInput.value.indexOf(" ") > -1) { alert("Sorry, no support for spaces right now :("); return } currentText = textInput.value; clearTimeoutsAndIntervals(); animating = false; setTimeout(commitResize, 100) } } function changeText2() { if (text !== "") { if (text.length > maxCharacters) { alert("Sorry, there is only room for " + maxCharacters + " characters. Try a shorter name."); return } if (text.indexOf(" ") > -1) { alert("Sorry, no support for spaces right now :("); return } currentText = text; clearTimeoutsAndIntervals(); animating = false; setTimeout(commitResize, 100) } } function changeSettings() { clearTimeoutsAndIntervals(); animating = false; setTimeout(commitResize, 100) } function setParticleNumberOptions(values) { var selector = document.getElementById("particlesSelect"); if (selector.options.length > 0 && parseInt(selector.options[0].value) === values[0]) { return } while (selector.options.length) { selector.remove(selector.options.length - 1) } for (var i = 0; i < values.length; i++) { selector.options[i] = new Option(values[i], values[i], i === 0, i === 0) } } }; lt_code.scrollTo = function (y, duration) { duration = duration * 1000; var scrollTop = lt_code.variable.scrollTop; var distance = y - scrollTop; var scrollCount = duration / 10; var everyDistance = distance / scrollCount; for (var index = 1; index <= scrollCount; index++) { setTimeout(function () { window.scrollBy(0, everyDistance) }, 10 * index) } }; lt_code.scrollTop = function (dom, timer) { var now_scroll = $(dom).scrollTop(); timer = timer * 1000 / 20; var every_scroll = now_scroll / timer; lt_code.scrollTop.run = setInterval(function () { $(dom).scrollTop(now_scroll - every_scroll); now_scroll = now_scroll - every_scroll; if (now_scroll <= 0) { clearInterval(lt_code.scrollTop.run) } }, 20) }; lt_code.scrollTop.run = null; lt_code.littleUse = {}; lt_code.littleUse.autoWidth = function (dom, widths, timer, dom_father) { switch (arguments.length) { case 2: setInterval(function () { dom.style.width = parseInt(document.body.offsetWidth * widths / 100) + "px" }, 50); break; case 3: setInterval(function () { dom.style.width = parseInt(document.body.offsetWidth * widths / 100) + "px" }, (timer < 1 ? 1 : timer) * 10); break; case 4: setInterval(function () { dom.style.width = parseInt(dom_father.offsetWidth * widths / 100) + "px" }, (timer < 1 ? 1 : timer) * 10); break; default: console.log("autoWidth函数输入参数出错!") } }; lt_code.littleUse.autoHeight = function (dom, heights, timer, dom_father) { switch (arguments.length) { case 2: setInterval(function () { dom.style.height = parseInt(document.body.offsetheight * heights / 100) + "px" }, 50); break; case 3: setInterval(function () { dom.style.height = parseInt(document.body.offsetheight * heights / 100) + "px" }, (timer < 1 ? 1 : timer) * 10); break; case 4: setInterval(function () { dom.style.height = parseInt(dom_father.offsetheight * heights / 100) + "px" }, (timer < 1 ? 1 : timer) * 10); break; default: console.log("autoHeight函数输入参数出错!") } }; lt_code.getJson = function (str) { return /(\{.*\})/.exec(str)[1] }; lt_code.Version = function () { return 14 }(); lt_code.math = {}; lt_code.math.lineFunc = function (funs) { var retrun_val = null; var read_funs = /([\d]*[xyz]*)([\+\-\*\/])([\d]*[xyz]*)\=([\d]*[xyz]*)/; var read_xyz = /[xyz]/; if (!Array.isArray(funs)) { var func = read_funs.exec(funs); console.log(func); var a1 = func[1]; var jisuan = func[2]; var a2 = func[3]; var a3 = func[4]; var a1_var = read_xyz_fun(a1); var a2_var = read_xyz_fun(a2); var a3_var = read_xyz_fun(a3); if (!chack_three_var(a1_var, a2_var, a3_var)) { retrun_val = "" } else { retrun_val = "" } } var read_xyz_fun = function (str) { var return_value = read_xyz.exec(str); if (!return_value) { return null } else { return return_value[0] } }; var chack_three_var = function (x, y, z) { var retrun_value; if (x && y && z) { if (z !== x || z !== y || y !== x) { retrun_value = false } else { retrun_value = true } } if (x && y && !z) { if (x !== y) { retrun_value = true } else { retrun_value = false } } if (x && !y && z) { if (x !== z) { retrun_value = false } else { retrun_value = true } } if (!x && y && z) { if (y !== z) { retrun_value = false } else { retrun_value = true } } if ((!x && !y && z) || (!x && y && !z) || (x && !y && !z)) { retrun_value = true } return retrun_value }; return retrun_val }; lt_code.trunGroupImg = function (imgBox, imgLoadBox, cut, count, imgName) { var nowImg = ""; var nowCount = 0; var images = function () { var ret = new Array(); for (var i = 0; i < count; i++) { ret.push(imgName + (i + 1) + ".jpg") } return ret }(); nowImg = images[0]; imgBox.style.position = "relative"; var runAround = 0; var cutImgBox = function () { var arr = new Array(); for (var i = 0; i < cut; i++) { var div = document.createElement("div"); div.style.width = (imgBox.offsetWidth / cut * (cut - i)) + "px"; div.style.height = (imgBox.offsetHeight / cut * (cut - i)) + "px"; div.style.backgroundImage = "url(" + nowImg + ")"; div.style.backgroundPositionX = "center"; div.style.backgroundPositionY = "center"; div.style.position = "absolute"; div.style.top = imgBox.offsetHeight / cut * i / 2 + "px"; div.style.left = imgBox.offsetWidth / cut * i / 2 + "px"; div.style.transform = "rotateZ(0deg)"; div.style.transitionDuration = "1s"; div.style.borderRadius = (imgBox.offsetWidth / cut * (cut - i)) / 2 + "px"; div.style.zIndex = i; imgBox.appendChild(div); arr.push(div) } return arr }(); var run = setInterval(function () { nowCount = nowCount >= count - 1 ? 0 : nowCount + 1; runAround = runAround > 6 ? 0 : runAround + 1; nowImg = images[nowCount]; changeImage() }, 5000); var changeImage = function () { cutImgBox.forEach(function (e, i) { if ((i + runAround) % 2 == 0) { e.style.transform = "rotateZ(360deg)" } else { e.style.transform = "rotateZ(-360deg)" } setTimeout(function () { e.style.backgroundImage = "url(" + nowImg + ")" }, 300) }) }; images.forEach(function (e) { var img = new Image(); img.src = e; imgLoadBox.appendChild(img) }); lt_code.trunGroupImg.runs.push(run); return run }; lt_code.trunGroupImg.runs = []; lt_code.innerGroup = function (dom) { var cas = document.createElement("canvas"); var ctx = cas.getContext("2d"); var max_group = lt_code.innerGroup.max_group || 300; dom.appendChild(cas); cas.width = window.innerWidth; cas.height = window.innerHeight; cas.style.position = "fixed"; cas.style.zIndex = "-1"; cas.style.top = "0"; cas.style.left = "0"; var draw_arc2 = function (x, y, r, color) { ctx.beginPath(); ctx.fillStyle = color; ctx.arc(x, y, r, 0, Math.PI * 2); ctx.fill(); ctx.closePath() }; var group = new Array(); var max_r = 6; var new_group = function (x, y) { var vx = Math.floor(Math.random() * 3) - 1.5; var vy = Math.floor(Math.random() * 3) - 1.5; var new_group = { x: x, y: y, vx: vx === 0 ? 1 : vx, vy: vy === 0 ? 1 : vy, r: Math.floor(Math.random() * max_r) === 0 ? 1 : Math.floor(Math.random() * max_r), color: random_color() }; group.unshift(new_group) }; var random_color = function () { var r = Math.floor(Math.random() * 255); var g = Math.floor(Math.random() * 255); var b = Math.floor(Math.random() * 255); return "rgb(" + r + "," + g + "," + b + ")" }; var move_way = function (dom) { dom.x = dom.x + dom.vx; dom.y = dom.y + dom.vy; draw_arc2(dom.x, dom.y, dom.r, dom.color); dom.vx = dom.x > cas.offsetWidth - dom.r ? -dom.vx : dom.vx; dom.vx = dom.x < dom.r ? -dom.vx : dom.vx; dom.vy = dom.y > cas.offsetHeight - dom.r ? -dom.vy : dom.vy; dom.vy = dom.y < dom.r ? -dom.vy : dom.vy }; cas.onmousedown = function (e) { e = e || window.event; new_group(e.clientX, e.clientY) }; var clear_canvas = function () { ctx.clearRect(0, 0, window.innerWidth, window.innerHeight) }; lt_code.innerGroup.run = setInterval(function () { if (group.length < max_group) { new_group(Math.random() * window.innerWidth, Math.random() * window.innerHeight) } while (group.length > max_group) { group.pop() } }, 1000); lt_code.innerGroup.run2 = setInterval(function () { clear_canvas(); for (var i = 0; i < group.length; i++) { if (group[i]) { move_way(group[i]) } } }, 20); lt_code.innerGroup.new_group = function (x, y) { new_group(x, y) } }; lt_code.innerGroup.run = null; lt_code.innerGroup.run2 = null; lt_code.innerGroup.max_group = null; lt_code.innerGroup.new_group = function (x, y) { }; lt_code.test = {}; lt_code.test.changeLtCode = function () { window._ = lt_code; lt_code.test.changeLtCode.changeBack = function () { window._ = null; lt_code.test.changeLtCode.changeBack = null } }; lt_code.lt_dom = lt_dom; lt_dom = null; lt_code.test.fullpage = function (backgrounds, times, dom_father, chackType, useDaohang, types, pageName) { document.body.style.overflow = "hidden"; document.head.innerHTML += "<style id='lt_for_fullpage'>*{padding:0;border:0;margin:0;}</style>"; clearInterval(lt_code.top_run); var pages_styles = lt_code.getId("lt_for_fullpage"); if (!times) { times = 1 } if (!dom_father) { lt_code.getAll().style.width = "0px"; lt_code.getAll().style.height = "0px" } else { dom_father.style.width = "0px"; dom_father.style.height = "0px" } var page_number = 0; var new_pages = 0; var canUseChange = false; if (!backgrounds) { backgrounds = new Array() } var height = window.innerHeight; var width = window.innerWidth; var pages = lt_code.getAll(".lt_for_page"); if (pages.length !== 0) { var useToPages = new Array(); var pages_long = pages.length; for (var i = 0; i < pages_long; i++) { pages[0].style.width = width + "px"; pages[0].style.height = height + "px"; dom_father = !dom_father ? lt_code.getAll() : dom_father; pages[0].style.overflow = "hidden"; if (backgrounds[i]) { pages[0].style.background = backgrounds[i] } else { pages[0].style.background = "" } useToPages[i] = pages[0].outerHTML; dom_father.removeChild(pages[0]) } dom_father.innerHTML = "<div id=\"lt_for_all_pages\"></div>" + dom_father.innerHTML; var lt_all_pages = lt_code.getId("lt_for_all_pages"); lt_all_pages.style.width = width; lt_all_pages.style.height = height * pages_long; lt_all_pages.style.position = "absolute"; lt_all_pages.style.top = 0; lt_all_pages.style.zIndex = -1; for (var i = 0; i < useToPages.length; i++) { lt_all_pages.innerHTML += useToPages[i] } pages = lt_code.getClass("lt_for_page"); lt_code.test.fullpage.now_page = page_number; var turn_up = function () { new_pages = page_number - 1; chackNewPage(); turn_to() }; var change_canUseChange = function () { setTimeout(function () { canUseChange = true }, times * 1000) }; var turn_down = function () { new_pages = page_number + 1; chackNewPage(); turn_to() }; var turn_to = function () { var change_height = new_pages * height; changeHeight(lt_all_pages, -change_height); page_number = new_pages; lt_code.test.fullpage.now_page = page_number }; var changeHeight = function (dom, num) { lt_code.moveBoxTo2(dom, 0, num, times) }; lt_code.test.fullpage.change_page = function (num) { if (canUseChange) { canUseChange = false; new_pages = num; turn_to(); canUseChange = false; change_canUseChange() } }; var chackNewPage = function () { if (new_pages >= pages.length) { new_pages = pages.length - 1; canUseChange = true } else if (new_pages < 0) { new_pages = 0; canUseChange = true } }; var chackWindow = function () { height = window.innerHeight; width = window.innerWidth; if (lt_code.getNum(pages[0].style.height) !== height || lt_code.getNum(pages[0].style.width) !== width) { for (var i = 0; i < pages.length; i++) { pages[i].style.height = height + "px"; pages[i].style.width = width + "px" } } }; if (chackType === 0) { lt_code.test.fullpage.run = NaN } else { lt_code.test.fullpage.run = chackType ? setInterval(() => { chackWindow() }, chackType * 50) : setInterval(() => { chackWindow() }, 200) } window.onmousewheel = function (e) { e = e || window.event; chackWindow(); if (e.wheelDelta && canUseChange && lt_code.test.fullpage.canUseMouseWheel) { if (lt_code.getNum(e.wheelDelta, 4) > 0) { turn_up() } else { turn_down() } canUseChange = false; change_canUseChange() } }; var innerDaohang = function () { document.body.innerHTML += "<div id='lt_for_pages_daohang'></div>"; var lt_daohang_box = lt_code.getId("lt_for_pages_daohang"); types = !types ? 1 : types; if (types === 1) { lt_daohang_box.style.width = "330px"; lt_daohang_box.style.height = height + "px"; lt_daohang_box.style.position = "absolute"; lt_daohang_box.style.left = "-270px"; lt_daohang_box.innerHTML += "<ul id='lt_daohang_ul'></ul>"; var lt_daohang_ul = lt_code.getId("lt_daohang_ul"); for (var i = 0; i < pages.length; i++) { lt_daohang_ul.innerHTML += "<li><a href='javascript:;' onclick=lt_code.test.fullpage.change_page(" + i + ") class=\"lt_for_change_page\"></a></li>" } var each_daohang = lt_code.getClass("lt_for_change_page"); pages_styles.innerHTML += "#lt_daohang_ul{list-style-type:none;border-right:1px solid #888;}#lt_daohang_ul li{width:80%;padding:10px;margin-top:10px;height:20px;border-radius:10px 0 0 10px;float:right;background-color:white;}.lt_for_change_page{text-decoration:none;color:black;float:right;}"; pageName = !pageName ? new Array() : pageName; for (var i = 0; i < each_daohang.length; i++) { each_daohang[i].innerHTML += "<b>" + (!pageName[i] ? "第" + (i + 1) + "页" : pageName[i]) + "</b>" } } }; window.onload = function () { change_canUseChange(); if (useDaohang) { } } } }; lt_code.test.fullpage.canUseMouseWheel = true; lt_code.test.fullpage.change_page = function (num) { }; lt_code.test.fullpage.now_page = NaN; lt_code.test.fullpage.run = NaN; lt_code.test.imgToBase = function (imgUrl) { var img = imgUrl; function getBase64Image(img) { var canvas = document.createElement("canvas"); canvas.width = img.width; canvas.height = img.height; var ctx = canvas.getContext("2d"); ctx.drawImage(img, 0, 0, img.width, img.height); var ext = img.src.substring(img.src.lastIndexOf(".") + 1).toLowerCase(); var dataURL = canvas.toDataURL("image/" + ext); return dataURL } var image = new Image(); image.src = img; image.onload = function () { var base64 = getBase64Image(image); console.log(base64) } }; lt_code.test.fileToBase = function (inputFile) { var oFReader = new FileReader(); var ret; if (inputFile.value.length > 0) { var file = inputFile.files[0]; oFReader.readAsDataURL(file) } oFReader.onloadend = function (e) { ret = e.target.result; lt_code.test.fileToBase.getReturn = function () { return ret } }; return ret }; lt_code.test.fileToBase.getReturn = function () { }; lt_code.test.lunbo = function (className, dom_father) { var i = 0; if (arguments.length !== 2) { console.log("lunbo函数参数输入出错"); return } else if (!(/\./.exec(className))) { console.log("lunbo函数className参数输入错误!请使用css方式输入!"); return } var all_lunbo = lt_code.getAll(className); if (!all_lunbo.length) { console.log("lunbo函数className参数输入出错!"); return } else if (dom_father.length && !dom_father) { console.log("lunbo函数dom_father参数输入错误!"); return } var each_lunbo = new Array(); var each_width = all_lunbo[0].offsetWidth; var each_height = all_lunbo[0].offsetHeight; var lunbo_cont = all_lunbo.length; var IsLeft = false; var IsTop = false; var timer = lt_code.test.lunbo.timer; var canMove = true; var theFirst = 0; var mouseOn = false; each_width = lt_code.test.lunbo.each_width || each_width; each_height = lt_code.test.lunbo.each_height || each_height; for (i = 0; i < lunbo_cont; i++) { each_lunbo[i] = all_lunbo[0].outerHTML; dom_father.removeChild(all_lunbo[0]) } dom_father.style.position = "relative"; dom_father.style.overflow = "hidden"; dom_father.innerHTML += "<div class=\"test_lunbo\"></div>"; var move_box = lt_code.getAll(".test_lunbo"); move_box.style.position = "absolute"; if (lt_code.test.lunbo.direction) { move_box.style.height = each_height * lunbo_cont + "px"; move_box.style.width = each_width + "px"; move_box.style.top = -each_height + "px" } else { move_box.style.height = each_height + "px"; move_box.style.width = each_width * lunbo_cont + "px"; move_box.style.left = -each_width + "px" } for (i = 0; i < lunbo_cont; i++) { move_box.innerHTML += each_lunbo[i] } var mover_fast = function () { var fast_time = timer / 3; fast_time = lt_code.getNum(fast_time * 10) / 10; if (canMove) { canMove = false; if (lt_code.test.lunbo.direction) { if (IsTop) { lt_code.moveBoxTo2(move_box, 0, -each_height * 2, fast_time); theFirst++ } else { lt_code.moveBoxTo2(move_box, 0, 0, fast_time); theFirst-- } } else { if (IsLeft) { lt_code.moveBoxTo2(move_box, -each_width * 2, 0, fast_time); theFirst++ } else { lt_code.moveBoxTo2(move_box, 0, 0, fast_time); theFirst-- } } theFirst = chack_the_number(theFirst); if (lt_code.test.lunbo.direction) { if (IsTop) { delete_lunbo_fast(chack_the_number(theFirst)) } else { delete_lunbo_fast(chack_the_number(theFirst)) } } else { if (IsLeft) { delete_lunbo_fast(chack_the_number(theFirst)) } else { delete_lunbo_fast(chack_the_number(theFirst)) } } lt_code.test.lunbo.nowPage = theFirst; setTimeout(function () { canMove = true }, fast_time * 1000 + 20) } }; var mover = function () { if (canMove) { canMove = false; if (lt_code.test.lunbo.direction) { if (IsTop) { lt_code.moveBoxTo2(move_box, 0, -each_height * 2, timer); theFirst++ } else { lt_code.moveBoxTo2(move_box, 0, 0, timer); theFirst-- } } else { if (IsLeft) { lt_code.moveBoxTo2(move_box, -each_width * 2, 0, timer); theFirst++ } else { lt_code.moveBoxTo2(move_box, 0, 0, timer); theFirst-- } } theFirst = chack_the_number(theFirst); if (lt_code.test.lunbo.direction) { if (IsTop) { delete_lunbo(chack_the_number(theFirst)) } else { delete_lunbo(chack_the_number(theFirst)) } } else { if (IsLeft) { delete_lunbo(chack_the_number(theFirst)) } else { delete_lunbo(chack_the_number(theFirst)) } } lt_code.test.lunbo.nowPage = theFirst; setTimeout(function () { canMove = true }, timer * 1000 + 20) } }; var delete_lunbo = function (num) { setTimeout(function () { if (IsLeft && !lt_code.test.lunbo.direction || lt_code.test.lunbo.direction && IsTop) { move_box.removeChild(all_lunbo[0]); move_box.innerHTML += each_lunbo[num] } else if (!IsLeft && !lt_code.test.lunbo.direction || lt_code.test.lunbo.direction && !IsTop) { move_box.removeChild(all_lunbo[lunbo_cont - 1]); move_box.innerHTML = each_lunbo[num] + move_box.innerHTML } update_lunbo(); if (lt_code.test.lunbo.direction) { move_box.style.top = -each_height + "px" } else { move_box.style.left = -each_width + "px" } }, timer * 1000) }; var delete_lunbo_fast = function (num) { var fast_time = timer / 3; fast_time = lt_code.getNum(fast_time * 10) / 10; setTimeout(function () { if (IsLeft && !lt_code.test.lunbo.direction || lt_code.test.lunbo.direction && IsTop) { move_box.removeChild(all_lunbo[0]); move_box.innerHTML += each_lunbo[num] } else if (!IsLeft && !lt_code.test.lunbo.direction || lt_code.test.lunbo.direction && !IsTop) { move_box.removeChild(all_lunbo[lunbo_cont - 1]); move_box.innerHTML = each_lunbo[num] + move_box.innerHTML } update_lunbo(); if (lt_code.test.lunbo.direction) { move_box.style.top = -each_height + "px" } else { move_box.style.left = -each_width + "px" } }, fast_time * 1000) }; var chack_the_number = function (num) { num = num >= lunbo_cont ? num - lunbo_cont : num; num = num < 0 ? num + lunbo_cont : num; return num }; var trun_left = function (num) { IsLeft = true; var run = setInterval(function () { num = num - 1; if (num < 0) { clearInterval(run) } mover() }, timer * 1000 + 20) }; var trun_right = function (num) { IsLeft = false; var run = setInterval(function () { num = num - 1; if (num < 0) { clearInterval(run) } mover() }, timer * 1000 + 20) }; var trun_top = function (num) { IsTop = true; var run = setInterval(function () { num = num - 1; if (num < 0) { clearInterval(run) } mover() }, timer * 1000 + 20) }; var trun_bottom = function (num) { IsTop = false; var run = setInterval(function () { num = num - 1; if (num < 0) { clearInterval(run) } mover() }, timer * 1000 + 20) }; lt_code.test.lunbo.moveTo = function (num, way) { if (lt_code.test.lunbo.direction) { if (way === "top") { trun_top(num) } else if (way === "bottom") { trun_bottom(num) } else { console.log("lunbo.moveTo函数way参数输入错误!") } } else { if (way === "left") { trun_left(num) } else if (way === "right") { trun_right(num) } else { console.log("lunbo.moveTo函数way参数输入错误!") } } }; var update_lunbo = function () { all_lunbo = lt_code.getAll(className); each_width = lt_code.test.lunbo.each_width || all_lunbo[0].offsetWidth; each_height = lt_code.test.lunbo.each_height || all_lunbo[0].offsetHeight }; update_lunbo(); lt_code.test.lunbo.waitTime = lt_code.test.lunbo.waitTime < lt_code.test.lunbo.timer ? lt_code.test.lunbo.timer : lt_code.test.lunbo.waitTime; var waitTime = lt_code.test.lunbo.waitTime; lt_code.test.lunbo.run = setInterval(function () { if (!mouseOn) { mover() } }, waitTime * 1000); var mouse_on1 = function () { clearInterval(lt_code.test.lunbo.run); lt_code.test.lunbo.run = new Array() }; var mouse_on2 = function () { if (mouseOn) { for (i = 0; i < lt_code.test.lunbo.run.length; i++) { clearInterval(lt_code.test.lunbo.run[i]) } } else { lt_code.test.lunbo.run[lt_code.test.lunbo.run.length] = setInterval(function () { mover() }, waitTime * 1000); for (i = 0; i < lt_code.test.lunbo.run.length; i++) { clearInterval(lt_code.test.lunbo.run[i]) } } if (lt_code.test.lunbo.run.length > 20) { lt_code.test.lunbo.run.splice(1, 19) } }; var moves = function (num) { var fast_time = timer / 3; fast_time = lt_code.getNum(fast_time * 10) / 10; var move_each = function () { num--; if (num < 0) { clearInterval(run) } mover_fast() }; if (num > 0) { var run = setInterval(function () { move_each() }, fast_time * 1000) } }; lt_code.test.lunbo.useOnMouseStop2 = function (box) { lt_code.test.lunbo.useOnMouseStop = false; var box_left = box.offsetLeft; var box_top = box.offsetTop; var box_Height = box.offsetHeight; var box_Width = box.offsetWidth; window.onmousemove = function (e) { e = e || window.event; if (e && e.clientX > box_left && e.clientX < (box_left + box_Width) && e.clientY < box_top && e.clientY < (box_top + box_Height)) { mouseOn = true } else { mouseOn = false } } }; if (lt_code.test.lunbo.useOnMouseStop) { dom_father.onmouseover = function () { mouseOn = true }; dom_father.onmouseout = function () { mouseOn = false } } if (lt_code.test.lunbo.useMouseWheel) { dom_father.onmousewheel = function (e) { e = e || window.event; if (e.wheelDelta && canMove && lt_code.test.lunbo.useMouseWheel) { lt_code.test.lunbo.useMouseWheel = false; if (lt_code.getNum(e.wheelDelta, 4) > 0) { if (lt_code.test.lunbo.direction) { trun_top(1) } else { trun_left(1) } } else { if (lt_code.test.lunbo.direction) { trun_bottom(1) } else { trun_right(1) } } setTimeout(function () { lt_code.test.lunbo.useMouseWheel = true }, timer * 1000) } } } lt_code.test.lunbo.moveToPage = function (num) { if (num >= lunbo_cont || num < 0) { console.log("lunbo模块中的moveToPage函数参数输入超出上限/下限!"); return } var TLnum; var RBnum; var chacks = function () { var chacks_left = function () { TLnum = theFirst - lunbo_cont; TLnum = num - TLnum }; var chacks_top = function () { TLnum = theFirst - lunbo_cont; TLnum = num - TLnum }; var chacks_bottom = function () { RBnum = theFirst + lunbo_cont; RBnum = RBnum - num }; var chacks_right = function () { RBnum = theFirst + lunbo_cont; RBnum = RBnum - num }; var chouse_way = function () { var abs = function (a) { if (a < 0) { a = -a } a = a > lunbo_cont ? a - lunbo_cont : a; return a }; RBnum = abs(RBnum); TLnum = abs(TLnum); if (TLnum < RBnum) { if (lt_code.test.lunbo.direction) { IsTop = true } else { IsLeft = true } } else if (TLnum > RBnum) { if (lt_code.test.lunbo.direction) { IsTop = false } else { IsLeft = false } } }; var return_num = function () { var return_value; if (lt_code.test.lunbo.direction) { if (IsTop) { return_value = TLnum } else { return_value = RBnum } } else { if (IsLeft) { return_value = TLnum } else { return_value = RBnum } } return return_value }; if (lt_code.test.lunbo.direction) { chacks_top(); chacks_bottom() } else { chacks_left(); chacks_right() } chouse_way(); return return_num() === 4 ? 0 : return_num() }; moves(chacks()) } }; lt_code.test.lunbo.run = null; lt_code.test.lunbo.direction = false; lt_code.test.lunbo.each_width = null; lt_code.test.lunbo.each_height = null; lt_code.test.lunbo.timer = 1; lt_code.test.lunbo.waitTime = 3; lt_code.test.lunbo.moveTo = function (num, way) { }; lt_code.test.lunbo.useOnMouseStop = true; lt_code.test.lunbo.useOnMouseStop2 = function (box) { }; lt_code.test.lunbo.useMouseWheel = false; lt_code.test.lunbo.nowPage = 0; lt_code.test.lunbo.moveToPage = function (num) { }; lt_code.test.middleBiger = function (className, minWH, maxWH) { var i; var tran_xy = (maxWH - minWH) / 2; var timer = lt_code.test.middleBiger.times; if (arguments.length !== 3) { console.log("middleBiger函数参数输入错误!"); return } var change_box = lt_code.getAll("." + className); if (change_box.length) { for (i = 0; i < change_box.length; i++) { change_box[i].style.transitionDuration = timer + "s"; change_box[i].style.transform = "translate(" + tran_xy + "px," + tran_xy + "px)" } } else { change_box.style.transitionDuration = timer + "s"; change_box.style.transform = "translate(" + tran_xy + "px," + tran_xy + "px)" } lt_code.test.middleBiger.useChange = lt_code.test.middleBiger.useChange > 3 ? 0 : lt_code.test.middleBiger.useChange; lt_code.test.middleBiger.useChange = lt_code.test.middleBiger.useChange < 0 ? 0 : lt_code.test.middleBiger.useChange; if (lt_code.test.middleBiger.useChange) { var waitTime = lt_code.test.middleBiger.waitTime; if (lt_code.test.middleBiger.useChange === 1) { if (waitTime <= timer * 2) { waitTime = timer * 2 + 0.05 } lt_code.test.middleBiger.run = setInterval(function () { biger(); setTimeout(function () { smaller() }, timer * 1000) }, waitTime * 1000) } else if (lt_code.test.middleBiger.useChange === 2) { if (waitTime <= timer) { waitTime = timer + 0.05 } lt_code.test.middleBiger.run = setInterval(function () { biger(); setTimeout(function () { smaller2() }, timer * 1000) }, waitTime * 1000) } else if (lt_code.test.middleBiger.useChange === 3) { if (waitTime <= timer) { waitTime = timer + 0.05 } lt_code.test.middleBiger.run = setInterval(function () { smaller(); setTimeout(function () { biger2() }, timer * 1000) }, waitTime * 1000) } } var smaller = function () { if (change_box.length) { for (i = 0; i < change_box.length; i++) { change_box[i].style.transitionDuration = timer + "s"; change_box[i].style.width = minWH + "px"; change_box[i].style.height = minWH + "px"; change_box[i].style.transform = "translate(" + tran_xy + "px," + tran_xy + "px)" } } else { change_box.style.transitionDuration = timer + "s"; change_box.style.height = minWH + "px"; change_box.style.width = minWH + "px"; change_box.style.transform = "translate(" + tran_xy + "px," + tran_xy + "px)" } }; var biger = function () { if (change_box.length) { for (i = 0; i < change_box.length; i++) { change_box[i].style.transitionDuration = timer + "s"; change_box[i].style.width = maxWH + "px"; change_box[i].style.height = maxWH + "px"; change_box[i].style.transform = "translate(0px,0px)" } } else { change_box.style.transitionDuration = timer + "s"; change_box.style.width = maxWH + "px"; change_box.style.height = maxWH + "px"; change_box.style.transform = "translate(0px,0px)" } }; var smaller2 = function () { if (change_box.length) { for (i = 0; i < change_box.length; i++) { change_box[i].style.transitionDuration = ""; change_box[i].style.width = minWH + "px"; change_box[i].style.height = minWH + "px"; change_box[i].style.transform = "translate(" + tran_xy + "px," + tran_xy + "px)" } } else { change_box.style.transitionDuration = ""; change_box.style.height = minWH + "px"; change_box.style.width = minWH + "px"; change_box.style.transform = "translate(" + tran_xy + "px," + tran_xy + "px)" } }; var biger2 = function () { if (change_box.length) { for (i = 0; i < change_box.length; i++) { change_box[i].style.transitionDuration = ""; change_box[i].style.width = maxWH + "px"; change_box[i].style.height = maxWH + "px"; change_box[i].style.transform = "translate(0px,0px)" } } else { change_box.style.transitionDuration = ""; change_box.style.width = maxWH + "px"; change_box.style.height = maxWH + "px"; change_box.style.transform = "translate(0px,0px)" } }; lt_code.test.middleBiger.biger = function () { biger() }; lt_code.test.middleBiger.smaller = function () { smaller() } }; lt_code.test.middleBiger.times = 1; lt_code.test.middleBiger.useChange = 0; lt_code.test.middleBiger.run = null; lt_code.test.middleBiger.waitTime = 2; lt_code.test.middleBiger.biger = null; lt_code.test.middleBiger.smaller = null; lt_code.test.cutImages = function (img, img2, input) { input.onchange = function () { clear_1(); read_img(this) }; if (typeof FileReader === "undefined") { alert("无法使用预览!"); return } else { var read_img = function (obj) { var file = obj.files[0]; console.log("图片大小为: " + file.size + " byte"); if (file.size > 5242880) { console.log("图片过大!"); return } var reader = new FileReader(); reader.onloadstart = function (e) { console.log("开始读取....") }; reader.onprogress = function (e) { console.log("正在读取中....") }; reader.onabort = function (e) { console.log("中断读取....") }; reader.onerror = function (e) { console.log("读取异常....") }; reader.onload = function (e) { console.log("成功读取...."); img.src = e.target.result; img_data = e.target.result }; reader.readAsDataURL(file) } } var cas2 = document.createElement("canvas"); cas2.width = 300; cas2.height = 300; cas2.style.opacity = "0"; cas2.style.position = "absolute"; cas2.style.top = "0"; var img_data = null; var return_data = null; var chack_box = document.createElement("div"); chack_box.id = "chack_box"; chack_box.style.border = "2px solid blue"; chack_box.style.position = "absolute"; chack_box.style.top = img.offsetTop + "px"; chack_box.style.left = img.offsetLeft + "px"; chack_box.style.width = "100px"; chack_box.style.height = "100px"; lt_code.getDomFather(img).appendChild(chack_box); lt_code.getDomFather(img).style.overflow = "hidden"; lt_code.makeMoveBox(chack_box); chack_box.onmousewheel = function (e) { e = e || window.event; var change_delta = e.wheelDelta / 120; chack_box.style.width = (/[\d]+/.exec(chack_box.style.width) - change_delta) + "px"; chack_box.style.width = (/-?[\d]+/.exec(chack_box.style.width) > img.offsetWidth ? img.offsetWidth : /-?[\d]+/.exec(chack_box.style.width)) + "px"; chack_box.style.height = (/[\d]+/.exec(chack_box.style.height) - change_delta) + "px"; chack_box.style.height = (/-?[\d]+/.exec(chack_box.style.height) > img.offsetHeight ? img.offsetHeight : /-?[\d]+/.exec(chack_box.style.height)) + "px" }; var ctx2 = cas2.getContext("2d"); var clear_2 = function () { ctx2.clearRect(0, 0, cas2.offsetWidth, cas2.offsetHeight); img2.src = "" }; var clear_1 = function () { clear_2(); img.src = "" }; var input_chick = function () { clear_2(); var else_img = document.createElement("img"); else_img.style.opacity = 0; else_img.id = "else_img"; else_img.src = img_data; lt_code.getAll().appendChild(else_img); var img_width = lt_code.getAll("#else_img").offsetWidth; img_width = img_width / 170; var img_height = lt_code.getAll("#else_img").offsetHeight; img_height = img_height / 170; lt_code.getAll().removeChild(lt_code.getAll("#else_img")); ctx2.drawImage(img, chack_box.offsetLeft * img_width, chack_box.offsetTop * img_height, chack_box.offsetWidth * img_width, chack_box.offsetHeight * img_height, 0, 0, 300, 300); var a = { img: img, 1: chack_box.offsetLeft * img_width, 2: chack_box.offsetTop * img_height, 3: chack_box.offsetWidth * img_width, 4: chack_box.offsetHeight * img_height, 5: 0, 6: 0, 7: 300, 8: 300, 9: img_width, 10: img_height }; img_data = cas2.toDataURL(); img2.src = img_data; return_data = img_data; img_data = img.src }; lt_code.test.cutImages.clearAll = function () { clear_1() }; lt_code.test.cutImages.getReturn = function () { return return_data }; lt_code.test.cutImages.cutImages = function () { lt_code.getAll().appendChild(cas2); input_chick() } }; lt_code.test.cutImages.getReturn = function () { return "" }; lt_code.test.cutImages.clearAll = function () { }; lt_code.test.cutImages.cutImages = function () { }; lt_code.test.getImgInput = function (input, cas) { var img_data = ""; var img = document.createElement("img"); input.onchange = function () { read_img(this) }; if (typeof FileReader === "undefined") { alert("无法使用预览!"); return } else { var type = arguments.length; if (type === 2) { var ctx = cas.getContext("2d") } var read_img = function (obj) { var file = obj.files[0]; console.log("图片大小为: " + file.size + " byte"); if (file.size > 5242880) { console.log("图片过大!"); return } var reader = new FileReader(); reader.onloadstart = function (e) { console.log("开始读取....") }; reader.onprogress = function (e) { console.log("正在读取中....") }; reader.onabort = function (e) { console.log("中断读取....") }; reader.onerror = function (e) { console.log("读取异常....") }; reader.onload = function (e) { console.log("成功读取...."); if (type === 1) { img_data = e.target.result } else if (type === 2) { img.src = e.target.result; img_data = e.target.result; setTimeout(function () { ctx.clearRect(0, 0, cas.offsetWidth, cas.offsetHeight); ctx.drawImage(img, 0, 0) }, 200) } }; reader.readAsDataURL(file) } } lt_code.test.getImgInput.getReturn = function () { return img_data }; lt_code.test.getImgInput.getImage = function () { img.src = img_data; return img } }; lt_code.test.getImgInput.getReturn = function () { return "" }; lt_code.test.getImgInput.getImage = function () { return document.createElement("img") }; lt_code.test.dataURLtoFile = function (data, filename) { var arr = data.split(','), mime = arr[0].match(/:(.*?);/)[1], bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n); while (n--) { u8arr[n] = bstr.charCodeAt(n) } return new File([u8arr], filename, { type: mime }) }; lt_code.test.downFile = function (data, fileName) { var blob = new Blob([lt_code.test.dataURLtoFile(data, fileName)], { type: /data\:(image\/[\w]+)\;base64/.exec(data)[1] }); if (window.navigator.msSaveOrOpenBlob) { navigator.msSaveBlob(blob, fileName) } else { var link = document.createElement('a'); link.href = window.URL.createObjectURL(blob); link.download = fileName; link.click(); window.URL.revokeObjectURL(link.href) } }; lt_code.test.on = function (doms, e, fuc) { lt_code.test.on._time = "a" + Date.now(); lt_code.test.on._doms = doms; !function () { }(); console.log(doms); eval("var " + lt_code.test.on._time + " = lt_code.test.on._doms;"); lt_code.test.on._doms = null; for (var i = 0; i < doms.length; i++) { eval(lt_code.test.on._time + "[" + i + "]." + e + " = " + fuc) } }; lt_code.test.on._time = null; lt_code.test.on._doms = null; lt_code.test.on2 = function (doms, e, fuc) { lt_code.test.on2._time = "_" + Date.now(); lt_code.test.on2._doms = lt_code.getAll(doms); eval("var " + lt_code.test.on2._time + " = lt_code.test.on2._doms;"); lt_code.test.on2._doms = null; for (var i = 0; i < doms.length; i++) { eval(lt_code.test.on2._time + "[" + i + "]." + e + " = " + fuc) } }; lt_code.test.on2._time = null; lt_code.test.on2._doms = null; lt_code.test.getNameOfValue = function (value) { for (var k in window) { if (window[k] === value) { return k.toString() } } };lt_code.variable.images = {}; lt_code.innerConsole = null; lt_code.test.threeDimensionalCloud = function () { var tagEle; var paper = lt_code.getAll(".tagBall"); var RADIUS = 300; var fallLength = 500; var tags = []; var angleX = Math.PI / 500; var angleY = Math.PI / 500; var CX = paper.offsetWidth / 2; var CY = paper.offsetHeight / 2; var EX = paper.offsetLeft + lt_code.getAll().scrollLeft + document.documentElement.scrollLeft; var EY = paper.offsetTop + lt_code.getAll().scrollTop + document.documentElement.scrollTop; var run = null; innit = function () { tagEle = lt_code.getAll(".tag"); tags = []; for (var i = 0; i < tagEle.length; i++) { var a, b; var k = (2 * (i + 1) - 1) / tagEle.length - 1; var a = Math.acos(k); var b = a * Math.sqrt(tagEle.length * Math.PI); var x = RADIUS * Math.sin(a) * Math.cos(b); var y = RADIUS * Math.sin(a) * Math.sin(b); var z = RADIUS * Math.cos(a); var t = new tag(tagEle[i], x, y, z); tagEle[i].style.color = lt_code.variable.roundColor(155); tags.push(t); t.move() } }; lt_code.innerConsole = function (str) { eval("console.log(" + str + ")") }; Array.prototype.forEach = function (callback) { for (var i = 0; i < this.length; i++) { callback.call(this[i]) } }; var rotateX = () => { var cos = Math.cos(angleX); var sin = Math.sin(angleX); tags.forEach(function () { var y1 = this.y * cos - this.z * sin; var z1 = this.z * cos + this.y * sin; this.y = y1; this.z = z1 }) }; var rotateY = () => { var cos = Math.cos(angleY); var sin = Math.sin(angleY); tags.forEach(function () { var x1 = this.x * cos - this.z * sin; var z1 = this.z * cos + this.x * sin; this.x = x1; this.z = z1 }) }; class tag { constructor(ele, x, y, z) { this.ele = ele; this.x = x; this.y = y; this.z = z }; move() { var scale = fallLength / (fallLength - this.z); var alpha = (this.z + RADIUS) / (2 * RADIUS); this.ele.style.fontSize = 15 * scale + "px"; this.ele.style.opacity = alpha + 0.5; this.ele.style.filter = "alpha(opacity = " + (alpha + 0.5) * 100 + ")"; this.ele.style.zIndex = parseInt(scale * 100); this.ele.style.left = this.x + CX - this.ele.offsetWidth / 2 + "px"; this.ele.style.top = this.y + CY - this.ele.offsetHeight / 2 + "px" } }; if ("addEventListener" in window) { paper.addEventListener("mousemove", function (event) { event = event || window.event; var x = event.clientX - EX - CX; var y = event.clientY - EY - CY + window.innerHeight; angleY = x * 0.0001; angleX = y * 0.0001 }) } else { paper.attachEvent("onmousemove", function (event) { event = event || window.event; var x = event.clientX - EX - CX; var y = event.clientY - EY - CY + window.innerHeight; angleY = x * 0.0001; angleX = y * 0.0001 }) } lt_code.getAll().addEventListener("mousewheel", function () { downPower() }); lt_code.getAll().addEventListener("mousedown", function () { downPower() }); paper.addEventListener("mouseenter", function () { downPower() }); downPower = function () { setTimeout(() => { if (lt_code.test.fullpage.now_page === 1) { clearInterval(run); run = setInterval(() => { rotateX(); rotateY(); tags.forEach(function () { this.move() }) }, 17) } else { clearInterval(run) } }, 100) } }